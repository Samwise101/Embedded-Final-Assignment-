# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 38
set hasByteEnable 0
set MemName nn_inference_hwmm_layer3_weights_layer3_weights_V
set CoreName ap_simcore_mem
set PortList { 1 1 }
set DataWd 11
set AddrRange 512
set AddrWd 9
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "00000110100" "00000110011" "11111011011" "00001000111" "00000011011" "00001001101" "11111100111" "11111000000" "11111000001" "11111000001" "11111001100" "11111001001" "00000011110" "11111010010" "11111110101" "00000101111" "11111011110" "11111100011" "00011000000" "00001000000" "11111111100" "11010100000" "00001011011" "00001011010" "00000110011" "11111001010" "00000110111" "11111011100" "00010001010" "11111001011" "00001111101" "11111000101" "11100111001" "11111010001" "00001110110" "11111001100" "00000111111" "00000101000" "00011011001" "00001101010" "00000111111" "11101111100" "00000010010" "11111010100" "00001100011" "11111101001" "00001100001" "11110000000" "11110011110" "11000101010" "00011101001" "11111011101" "00001000100" "00011111001" "00000000101" "11101101101" "11100011000" "00001101000" "11110001111" "11101101101" "00011110010" "11110110110" "11110011111" "00010011100" "00001100101" "00000010000" "11100110000" "11111111010" "00000110011" "00011000000" "00000010001" "11111000101" "00010011101" "00000100010" "00000001011" "11100011110" "11111110001" "11110011100" "00001011000" "00001001111" "00000001100" "00010100101" "00010000000" "11111011110" "00000010010" "00001111001" "11011101100" "00011100111" "00000100100" "11011101100" "11110001111" "00000110010" "11011101000" "11111111100" "00000011111" "00011110111" "11101011111" "00000101001" "11111001100" "11110111111" "00010001010" "00001111010" "11011110011" "00011110111" "00000111111" "00000101100" "11111000000" "00000101111" "11111110100" "11110110001" "00010010101" "00011000111" "00001100100" "11011000010" "00010011000" "00000111010" "11100100100" "00010001001" "00001100011" "00000011100" "11111000010" "00000101000" "00001001101" "00001110111" "00010101011" "11111100000" "11101100001" "11111011010" "11111100000" "11101101010" "00000111110" "11110100010" "11100001000" "00001001000" "00011010011" "00000110000" "11111001011" "00001000001" "11110111010" "11110101010" "11110010000" "11111101001" "00000111100" "00001010000" "00000111011" "00001011001" "11101100010" "00000111010" "11101101101" "11010111100" "00100001011" "00000011011" "11110011111" "11100101000" "00001101100" "00010011101" "00101000100" "11111010101" "11101101100" "11100111001" "11111001011" "11101010110" "11111001001" "11111010111" "11100110001" "11111110001" "11100001001" "00101001010" "11011010111" "11110000010" "00011000010" "00100000010" "11111010000" "00000100101" "11111010101" "00011101001" "11111011111" "00001000111" "11011111000" "11111111111" "00010111011" "10111010011" "11100101101" "00010001110" "00001011110" "00001000001" "00100010001" "11111101000" "11111100100" "11111001011" "00001010101" "00000101101" "00000110001" "00000100110" "11110010010" "11111011001" "00011000010" "00000100011" "00010000001" "11101101100" "00101011001" "00011010101" "11100000110" "00001000000" "11110011000" "00000000100" "00010110010" "11100010110" "11101000111" "11110111001" "00001110001" "11111010001" "00000011000" "00011011101" "11001001010" "00110000000" "11111100011" "00000001011" "00010101000" "00001110111" "00000101110" "11111110100" "11101010101" "00001001011" "11110011010" "00000011101" "00001000111" "11111000110" "00000101101" "00000011110" "00000010111" "00001100000" "11111111100" "11111100001" "11101101111" "11110110000" "00011000100" "11111111000" "00000001011" "00001110011" "11100111000" "00001100011" "11111111100" "11110101110" "11100111010" "11101001010" "00000010001" "00000110100" "11110001011" "11101011111" "11111100000" "00001000101" "00001110101" "00000110101" "11101110010" "00110011010" "00001111100" "11111000111" "11100111111" "11110101100" "11110110001" "11010011001" "11110110101" "00001001110" "00011101000" "00000000011" "00010110100" "00001010101" "11111111111" "00000000100" "00000000110" "11110110010" "00100101001" "11111011111" "11101100011" "00000001100" "00000110101" "00010011110" "11001110000" "00011010011" "00001101110" "11010010011" "11011011000" "11101001110" "11011110010" "11111000101" "00001110000" "11100000110" "00001001011" "11110010011" "11001001110" "11111001111" "00000100010" "11011100000" "11111110110" "00010110101" "11110001110" "00100110001" "00100011100" "00011001111" "11111011001" "11110101100" "00010110001" "00010111111" "11111101001" "00011000011" "11111111100" "11110110011" "00000010011" "11101110000" "00100101010" "00010110010" "00100001111" "00000001110" "11011101100" "11110100011" "11100100001" "00000011110" "11011100001" "11100101111" "11111111101" "11101110110" "11101110101" "11110100000" "00100100111" "11101101011" "00010010111" "00011111000" "00010010110" "00000011011" "00010101110" "00100011101" "11100010111" "11110101010" "00010010110" "11110110110" "00011110000" "11111001000" "11111110000" "00000111001" "11110001011" "11110101110" "11111111101" "11100100001" "11011001110" "00010110010" "11111100001" "00000101010" "00010001000" "00001001011" "00001000000" "00000111111" "11100100100" "00011100100" "00001001110" "00000010111" "00000011111" "00001001011" "11111001001" "11011110010" "00111100100" "00001001000" "11101001111" "00011010001" "11111011101" "11111011100" "00010110111" "11110001101" "11100111011" "00000000100" "00011000100" "00000110011" "00000000110" "00000100001" "00000000100" "11100110001" "00001101001" "00000111011" "11111110100" "11110101001" "11011011110" "11111001011" "11110110000" "00010101111" "00010001001" "00000010110" "00011011100" "00000000000" "11111100010" "00011001101" "11110001010" "00001000010" "00001001110" "11101110100" "00010100000" "11110010010" "11011111111" "00000101111" "11110111001" "00001001111" "00000101001" "00000100000" "00110001010" "11111101001" "11111000010" "11111111010" "00001100111" "11011100000" "10110111010" "00000111010" "00000100011" "11111101111" "00011010110" "11111101001" "11011110110" "11110100011" "00101111011" "00001111111" "00100010101" "11111001001" "00001001111" "00000111011" "00000110010" "11011001001" "11101101100" "11111110000" "00010010001" "11101011100" "11111110110" "00000000001" "11110100111" "00000101010" "00001100100" "00001000011" "00000000001" "11111100001" "00000100011" "00001000001" "00011000011" "11111011011" "11111110110" "00011010100" "00001001111" "11100110101" "00100000111" "11110111110" "11100100000" "11101110101" "00001011010" "00000100010" "11101100110" "11111010010" "00000111111" "11111111010" "11100110000" "00010110010" "11101000011" "11011110111" "00100110000" "00010011010" "11011000101" "11111010001" "11111111110" "00000101101" "00001010110" "11111110101" "00100100100" "00000100001" "11110100110" "00010100100" "11111011010" "11100111100" "11111000101" "00000000101" "11110101101" "11111100110" "00011000000" "11111100001" "00000111011" "11010110011" "00011100110" "11111100101" "00011010000" "11111010001" "11111011011" "00100100000" "00010100001" "11001101100" "11100001011" "00010000111" "00010001000" "11011111101" "00000111110" "11111011011" "11110101100" "11111000111" "11110011111" "11011011000" "11110010111" "00000100101" "00010011111" "00100101000" "11100110000" "11111000111" "00011100111" "11110001111" "00000111010" "00101101111" "00010000010" "11110100111" "00010000010" "11010011001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 39 \
    name input_0 \
    reset_level 1 \
    sync_rst true \
    dir I \
    corename input_0 \
    op interface \
    ports { input_0_address0 { O 5 vector } input_0_ce0 { O 1 bit } input_0_q0 { I 32 vector } input_0_address1 { O 5 vector } input_0_ce1 { O 1 bit } input_0_q1 { I 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'input_0'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 40 \
    name output_0 \
    reset_level 1 \
    sync_rst true \
    dir O \
    corename output_0 \
    op interface \
    ports { output_0_address0 { O 4 vector } output_0_ce0 { O 1 bit } output_0_we0 { O 1 bit } output_0_d0 { O 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'output_0'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


