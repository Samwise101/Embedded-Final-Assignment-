// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_hwmm_layer4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state6 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state10 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state14 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [3:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [3:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg[3:0] input_0_address0;
reg input_0_ce0;
reg[3:0] input_0_address1;
reg input_0_ce1;
reg[3:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[31:0] output_0_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] weights_layer4_weights_V_address0;
reg    weights_layer4_weights_V_ce0;
wire  signed [11:0] weights_layer4_weights_V_q0;
reg   [7:0] weights_layer4_weights_V_address1;
reg    weights_layer4_weights_V_ce1;
wire   [11:0] weights_layer4_weights_V_q1;
reg   [5:0] k_reg_265;
reg   [31:0] sum_V_8_reg_277;
reg   [5:0] k_1_reg_290;
reg   [31:0] sum_V_9_reg_302;
reg   [5:0] k_2_reg_315;
reg   [31:0] sum_V_10_reg_327;
reg   [5:0] k_3_reg_340;
reg   [31:0] sum_V_11_reg_352;
reg  signed [11:0] reg_365;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_1187;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] tmp_5_reg_1237;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_state13_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] tmp_10_reg_1282;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
wire    ap_block_state17_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] tmp_14_reg_1327;
wire   [0:0] tmp_fu_369_p3;
reg   [0:0] tmp_reg_1187_pp0_iter1_reg;
wire   [5:0] add_ln79_fu_377_p2;
reg   [5:0] add_ln79_reg_1191;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] zext_ln1118_1_fu_413_p1;
reg   [7:0] zext_ln1118_1_reg_1196;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln79_fu_575_p1;
reg   [63:0] zext_ln79_reg_1226;
wire    ap_CS_fsm_state6;
wire   [7:0] zext_ln79_3_fu_579_p1;
reg   [7:0] zext_ln79_3_reg_1231;
wire   [0:0] tmp_5_fu_583_p3;
reg   [0:0] tmp_5_reg_1237_pp1_iter1_reg;
wire   [5:0] add_ln79_1_fu_591_p2;
reg   [5:0] add_ln79_1_reg_1241;
reg    ap_enable_reg_pp1_iter0;
reg    ap_enable_reg_pp1_iter2;
wire   [63:0] zext_ln79_1_fu_779_p1;
reg   [63:0] zext_ln79_1_reg_1271;
wire    ap_CS_fsm_state10;
wire   [7:0] zext_ln79_4_fu_783_p1;
reg   [7:0] zext_ln79_4_reg_1276;
wire   [0:0] tmp_10_fu_787_p3;
reg   [0:0] tmp_10_reg_1282_pp2_iter1_reg;
wire   [5:0] add_ln79_2_fu_795_p2;
reg   [5:0] add_ln79_2_reg_1286;
reg    ap_enable_reg_pp2_iter0;
reg    ap_enable_reg_pp2_iter2;
wire   [63:0] zext_ln79_2_fu_983_p1;
reg   [63:0] zext_ln79_2_reg_1316;
wire    ap_CS_fsm_state14;
wire   [7:0] zext_ln79_5_fu_987_p1;
reg   [7:0] zext_ln79_5_reg_1321;
wire   [0:0] tmp_14_fu_991_p3;
reg   [0:0] tmp_14_reg_1327_pp3_iter1_reg;
wire   [5:0] add_ln79_3_fu_999_p2;
reg   [5:0] add_ln79_3_reg_1331;
reg    ap_enable_reg_pp3_iter0;
reg    ap_enable_reg_pp3_iter2;
wire   [3:0] add_ln75_fu_1181_p2;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_condition_pp3_exit_iter1_state16;
reg   [3:0] j_reg_253;
reg   [5:0] ap_phi_mux_k_phi_fu_269_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_k_1_phi_fu_294_p4;
wire    ap_block_pp1_stage0;
reg   [5:0] ap_phi_mux_k_2_phi_fu_319_p4;
wire    ap_block_pp2_stage0;
reg   [5:0] ap_phi_mux_k_3_phi_fu_344_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln1118_2_fu_423_p1;
wire   [63:0] k_cast5_fu_428_p1;
wire   [63:0] zext_ln1118_5_fu_483_p1;
wire   [63:0] zext_ln77_fu_443_p1;
wire   [63:0] j_cast18_fu_564_p1;
wire   [63:0] zext_ln1118_7_fu_632_p1;
wire   [63:0] k_1_cast6_fu_637_p1;
wire   [63:0] zext_ln1118_10_fu_692_p1;
wire   [63:0] zext_ln77_1_fu_652_p1;
wire   [63:0] zext_ln1118_12_fu_836_p1;
wire   [63:0] k_2_cast7_fu_841_p1;
wire   [63:0] zext_ln1118_15_fu_896_p1;
wire   [63:0] zext_ln77_2_fu_856_p1;
wire   [63:0] zext_ln1118_17_fu_1040_p1;
wire   [63:0] k_3_cast8_fu_1045_p1;
wire   [63:0] zext_ln1118_20_fu_1100_p1;
wire   [63:0] zext_ln77_3_fu_1060_p1;
wire   [4:0] trunc_ln1118_fu_383_p1;
wire   [6:0] tmp_1_fu_395_p3;
wire   [7:0] tmp_cast_fu_387_p3;
wire   [7:0] zext_ln1118_fu_403_p1;
wire   [7:0] add_ln1118_fu_407_p2;
wire   [7:0] add_ln1118_1_fu_417_p2;
wire   [3:0] empty_27_fu_433_p1;
wire   [3:0] or_ln79_fu_437_p2;
wire   [6:0] tmp_2_fu_448_p3;
wire   [4:0] tmp_3_fu_460_p3;
wire   [7:0] zext_ln1118_3_fu_456_p1;
wire   [7:0] zext_ln1118_4_fu_468_p1;
wire   [7:0] add_ln1118_2_fu_472_p2;
wire   [7:0] add_ln1118_3_fu_478_p2;
wire   [39:0] lhs_1_fu_502_p3;
wire   [39:0] mul_ln1192_fu_496_p2;
wire   [39:0] ret_V_fu_510_p2;
wire   [31:0] tmp_4_fu_530_p4;
wire   [39:0] lhs_2_fu_540_p3;
wire   [39:0] mul_ln1192_1_fu_524_p2;
wire   [39:0] ret_V_4_fu_548_p2;
wire   [3:0] or_ln75_fu_569_p2;
wire   [4:0] trunc_ln1118_1_fu_597_p1;
wire   [6:0] tmp_6_fu_609_p3;
wire   [7:0] tmp_5_cast_fu_601_p3;
wire   [7:0] zext_ln1118_6_fu_617_p1;
wire   [7:0] add_ln1118_4_fu_621_p2;
wire   [7:0] add_ln1118_5_fu_627_p2;
wire   [3:0] empty_29_fu_642_p1;
wire   [3:0] or_ln79_1_fu_646_p2;
wire   [6:0] tmp_7_fu_657_p3;
wire   [4:0] tmp_8_fu_669_p3;
wire   [7:0] zext_ln1118_8_fu_665_p1;
wire   [7:0] zext_ln1118_9_fu_677_p1;
wire   [7:0] add_ln1118_6_fu_681_p2;
wire   [7:0] add_ln1118_7_fu_687_p2;
wire   [39:0] lhs_4_fu_711_p3;
wire   [39:0] mul_ln1192_2_fu_705_p2;
wire   [39:0] ret_V_5_fu_719_p2;
wire   [31:0] tmp_9_fu_739_p4;
wire   [39:0] lhs_5_fu_749_p3;
wire   [39:0] mul_ln1192_3_fu_733_p2;
wire   [39:0] ret_V_6_fu_757_p2;
wire   [3:0] or_ln75_1_fu_773_p2;
wire   [4:0] trunc_ln1118_2_fu_801_p1;
wire   [6:0] tmp_s_fu_813_p3;
wire   [7:0] tmp_10_cast_fu_805_p3;
wire   [7:0] zext_ln1118_11_fu_821_p1;
wire   [7:0] add_ln1118_8_fu_825_p2;
wire   [7:0] add_ln1118_9_fu_831_p2;
wire   [3:0] empty_31_fu_846_p1;
wire   [3:0] or_ln79_2_fu_850_p2;
wire   [6:0] tmp_11_fu_861_p3;
wire   [4:0] tmp_12_fu_873_p3;
wire   [7:0] zext_ln1118_13_fu_869_p1;
wire   [7:0] zext_ln1118_14_fu_881_p1;
wire   [7:0] add_ln1118_10_fu_885_p2;
wire   [7:0] add_ln1118_11_fu_891_p2;
wire   [39:0] lhs_7_fu_915_p3;
wire   [39:0] mul_ln1192_4_fu_909_p2;
wire   [39:0] ret_V_7_fu_923_p2;
wire   [31:0] tmp_13_fu_943_p4;
wire   [39:0] lhs_8_fu_953_p3;
wire   [39:0] mul_ln1192_5_fu_937_p2;
wire   [39:0] ret_V_8_fu_961_p2;
wire   [3:0] or_ln75_2_fu_977_p2;
wire   [4:0] trunc_ln1118_3_fu_1005_p1;
wire   [6:0] tmp_15_fu_1017_p3;
wire   [7:0] tmp_15_cast_fu_1009_p3;
wire   [7:0] zext_ln1118_16_fu_1025_p1;
wire   [7:0] add_ln1118_12_fu_1029_p2;
wire   [7:0] add_ln1118_13_fu_1035_p2;
wire   [3:0] empty_33_fu_1050_p1;
wire   [3:0] or_ln79_3_fu_1054_p2;
wire   [6:0] tmp_16_fu_1065_p3;
wire   [4:0] tmp_17_fu_1077_p3;
wire   [7:0] zext_ln1118_18_fu_1073_p1;
wire   [7:0] zext_ln1118_19_fu_1085_p1;
wire   [7:0] add_ln1118_14_fu_1089_p2;
wire   [7:0] add_ln1118_15_fu_1095_p2;
wire   [39:0] lhs_10_fu_1119_p3;
wire   [39:0] mul_ln1192_6_fu_1113_p2;
wire   [39:0] ret_V_9_fu_1127_p2;
wire   [31:0] tmp_18_fu_1147_p4;
wire   [39:0] lhs_11_fu_1157_p3;
wire   [39:0] mul_ln1192_7_fu_1141_p2;
wire   [39:0] ret_V_10_fu_1165_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

nn_inference_hwmm_layer4_weights_layer4_weights_V #(
    .DataWidth( 12 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
weights_layer4_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer4_weights_V_address0),
    .ce0(weights_layer4_weights_V_ce0),
    .q0(weights_layer4_weights_V_q0),
    .address1(weights_layer4_weights_V_address1),
    .ce1(weights_layer4_weights_V_ce1),
    .q1(weights_layer4_weights_V_q1)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U43(
    .din0(reg_365),
    .din1(input_0_q1),
    .dout(mul_ln1192_fu_496_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U44(
    .din0(weights_layer4_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_1_fu_524_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U45(
    .din0(reg_365),
    .din1(input_0_q1),
    .dout(mul_ln1192_2_fu_705_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U46(
    .din0(weights_layer4_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_3_fu_733_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U47(
    .din0(reg_365),
    .din1(input_0_q1),
    .dout(mul_ln1192_4_fu_909_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U48(
    .din0(weights_layer4_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_5_fu_937_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U49(
    .din0(reg_365),
    .din1(input_0_q1),
    .dout(mul_ln1192_6_fu_1113_p2)
);

nn_inference_mul_12s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_12s_32s_40_1_1_U50(
    .din0(weights_layer4_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_7_fu_1141_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state16)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter1_state16))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_253 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_reg_253 <= add_ln75_fu_1181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_290 <= 6'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_5_reg_1237 == 1'd0))) begin
        k_1_reg_290 <= add_ln79_1_reg_1241;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_2_reg_315 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_10_reg_1282 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        k_2_reg_315 <= add_ln79_2_reg_1286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_3_reg_340 <= 6'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_14_reg_1327 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        k_3_reg_340 <= add_ln79_3_reg_1331;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_265 <= 6'd0;
    end else if (((tmp_reg_1187 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_265 <= add_ln79_reg_1191;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_10_reg_327 <= 32'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (tmp_10_reg_1282_pp2_iter1_reg == 1'd0))) begin
        sum_V_10_reg_327 <= {{ret_V_8_fu_961_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_V_11_reg_352 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (tmp_14_reg_1327_pp3_iter1_reg == 1'd0))) begin
        sum_V_11_reg_352 <= {{ret_V_10_fu_1165_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_V_8_reg_277 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_1187_pp0_iter1_reg == 1'd0))) begin
        sum_V_8_reg_277 <= {{ret_V_4_fu_548_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_V_9_reg_302 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_5_reg_1237_pp1_iter1_reg == 1'd0))) begin
        sum_V_9_reg_302 <= {{ret_V_6_fu_757_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_5_fu_583_p3 == 1'd0))) begin
        add_ln79_1_reg_1241 <= add_ln79_1_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_10_fu_787_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln79_2_reg_1286 <= add_ln79_2_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (tmp_14_fu_991_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln79_3_reg_1331 <= add_ln79_3_fu_999_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_369_p3 == 1'd0))) begin
        add_ln79_reg_1191 <= add_ln79_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_reg_1187 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_14_reg_1327 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_10_reg_1282 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_5_reg_1237 == 1'd0)))) begin
        reg_365 <= weights_layer4_weights_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_10_reg_1282 <= ap_phi_mux_k_2_phi_fu_319_p4[32'd5];
        tmp_10_reg_1282_pp2_iter1_reg <= tmp_10_reg_1282;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_14_reg_1327 <= ap_phi_mux_k_3_phi_fu_344_p4[32'd5];
        tmp_14_reg_1327_pp3_iter1_reg <= tmp_14_reg_1327;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_5_reg_1237 <= ap_phi_mux_k_1_phi_fu_294_p4[32'd5];
        tmp_5_reg_1237_pp1_iter1_reg <= tmp_5_reg_1237;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_1187 <= ap_phi_mux_k_phi_fu_269_p4[32'd5];
        tmp_reg_1187_pp0_iter1_reg <= tmp_reg_1187;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_369_p3 == 1'd0))) begin
        zext_ln1118_1_reg_1196[3 : 0] <= zext_ln1118_1_fu_413_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln79_1_reg_1271[0] <= zext_ln79_1_fu_779_p1[0];
zext_ln79_1_reg_1271[3 : 2] <= zext_ln79_1_fu_779_p1[3 : 2];
        zext_ln79_4_reg_1276[0] <= zext_ln79_4_fu_783_p1[0];
zext_ln79_4_reg_1276[3 : 2] <= zext_ln79_4_fu_783_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        zext_ln79_2_reg_1316[3 : 2] <= zext_ln79_2_fu_983_p1[3 : 2];
        zext_ln79_5_reg_1321[3 : 2] <= zext_ln79_5_fu_987_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        zext_ln79_3_reg_1231[3 : 1] <= zext_ln79_3_fu_579_p1[3 : 1];
        zext_ln79_reg_1226[3 : 1] <= zext_ln79_fu_575_p1[3 : 1];
    end
end

always @ (*) begin
    if ((tmp_fu_369_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_5_fu_583_p3 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_10_fu_787_p3 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_condition_pp3_exit_iter1_state16 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_subdone) & (tmp_14_fu_991_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_5_reg_1237 == 1'd0))) begin
        ap_phi_mux_k_1_phi_fu_294_p4 = add_ln79_1_reg_1241;
    end else begin
        ap_phi_mux_k_1_phi_fu_294_p4 = k_1_reg_290;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_10_reg_1282 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_k_2_phi_fu_319_p4 = add_ln79_2_reg_1286;
    end else begin
        ap_phi_mux_k_2_phi_fu_319_p4 = k_2_reg_315;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_14_reg_1327 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_k_3_phi_fu_344_p4 = add_ln79_3_reg_1331;
    end else begin
        ap_phi_mux_k_3_phi_fu_344_p4 = k_3_reg_340;
    end
end

always @ (*) begin
    if (((tmp_reg_1187 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_269_p4 = add_ln79_reg_1191;
    end else begin
        ap_phi_mux_k_phi_fu_269_p4 = k_reg_265;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        input_0_address0 = zext_ln77_3_fu_1060_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        input_0_address0 = zext_ln77_2_fu_856_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_0_address0 = zext_ln77_1_fu_652_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_address0 = zext_ln77_fu_443_p1;
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        input_0_address1 = k_3_cast8_fu_1045_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        input_0_address1 = k_2_cast7_fu_841_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_0_address1 = k_1_cast6_fu_637_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_address1 = k_cast5_fu_428_p1;
    end else begin
        input_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_address0 = zext_ln79_2_reg_1316;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_address0 = zext_ln79_1_reg_1271;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_address0 = zext_ln79_reg_1226;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_address0 = j_cast18_fu_564_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_d0 = sum_V_11_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_d0 = sum_V_10_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_d0 = sum_V_9_reg_302;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_d0 = sum_V_8_reg_277;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        weights_layer4_weights_V_address0 = zext_ln1118_20_fu_1100_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        weights_layer4_weights_V_address0 = zext_ln1118_15_fu_896_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer4_weights_V_address0 = zext_ln1118_10_fu_692_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_layer4_weights_V_address0 = zext_ln1118_5_fu_483_p1;
    end else begin
        weights_layer4_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        weights_layer4_weights_V_address1 = zext_ln1118_17_fu_1040_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        weights_layer4_weights_V_address1 = zext_ln1118_12_fu_836_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        weights_layer4_weights_V_address1 = zext_ln1118_7_fu_632_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        weights_layer4_weights_V_address1 = zext_ln1118_2_fu_423_p1;
    end else begin
        weights_layer4_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        weights_layer4_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer4_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        weights_layer4_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer4_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_369_p3 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_369_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_5_fu_583_p3 == 1'd1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_5_fu_583_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_10_fu_787_p3 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_10_fu_787_p3 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_10_fu_885_p2 = (zext_ln1118_13_fu_869_p1 + zext_ln1118_14_fu_881_p1);

assign add_ln1118_11_fu_891_p2 = (add_ln1118_10_fu_885_p2 + zext_ln79_4_reg_1276);

assign add_ln1118_12_fu_1029_p2 = (tmp_15_cast_fu_1009_p3 + zext_ln1118_16_fu_1025_p1);

assign add_ln1118_13_fu_1035_p2 = (add_ln1118_12_fu_1029_p2 + zext_ln79_5_reg_1321);

assign add_ln1118_14_fu_1089_p2 = (zext_ln1118_18_fu_1073_p1 + zext_ln1118_19_fu_1085_p1);

assign add_ln1118_15_fu_1095_p2 = (add_ln1118_14_fu_1089_p2 + zext_ln79_5_reg_1321);

assign add_ln1118_1_fu_417_p2 = (add_ln1118_fu_407_p2 + zext_ln1118_1_fu_413_p1);

assign add_ln1118_2_fu_472_p2 = (zext_ln1118_3_fu_456_p1 + zext_ln1118_4_fu_468_p1);

assign add_ln1118_3_fu_478_p2 = (add_ln1118_2_fu_472_p2 + zext_ln1118_1_reg_1196);

assign add_ln1118_4_fu_621_p2 = (tmp_5_cast_fu_601_p3 + zext_ln1118_6_fu_617_p1);

assign add_ln1118_5_fu_627_p2 = (add_ln1118_4_fu_621_p2 + zext_ln79_3_reg_1231);

assign add_ln1118_6_fu_681_p2 = (zext_ln1118_8_fu_665_p1 + zext_ln1118_9_fu_677_p1);

assign add_ln1118_7_fu_687_p2 = (add_ln1118_6_fu_681_p2 + zext_ln79_3_reg_1231);

assign add_ln1118_8_fu_825_p2 = (tmp_10_cast_fu_805_p3 + zext_ln1118_11_fu_821_p1);

assign add_ln1118_9_fu_831_p2 = (add_ln1118_8_fu_825_p2 + zext_ln79_4_reg_1276);

assign add_ln1118_fu_407_p2 = (tmp_cast_fu_387_p3 + zext_ln1118_fu_403_p1);

assign add_ln75_fu_1181_p2 = (j_reg_253 + 4'd4);

assign add_ln79_1_fu_591_p2 = (ap_phi_mux_k_1_phi_fu_294_p4 + 6'd2);

assign add_ln79_2_fu_795_p2 = (ap_phi_mux_k_2_phi_fu_319_p4 + 6'd2);

assign add_ln79_3_fu_999_p2 = (ap_phi_mux_k_3_phi_fu_344_p4 + 6'd2);

assign add_ln79_fu_377_p2 = (ap_phi_mux_k_phi_fu_269_p4 + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = 1'b0;

assign empty_27_fu_433_p1 = k_reg_265[3:0];

assign empty_29_fu_642_p1 = k_1_reg_290[3:0];

assign empty_31_fu_846_p1 = k_2_reg_315[3:0];

assign empty_33_fu_1050_p1 = k_3_reg_340[3:0];

assign j_cast18_fu_564_p1 = j_reg_253;

assign k_1_cast6_fu_637_p1 = k_1_reg_290;

assign k_2_cast7_fu_841_p1 = k_2_reg_315;

assign k_3_cast8_fu_1045_p1 = k_3_reg_340;

assign k_cast5_fu_428_p1 = k_reg_265;

assign lhs_10_fu_1119_p3 = {{sum_V_11_reg_352}, {8'd0}};

assign lhs_11_fu_1157_p3 = {{tmp_18_fu_1147_p4}, {8'd0}};

assign lhs_1_fu_502_p3 = {{sum_V_8_reg_277}, {8'd0}};

assign lhs_2_fu_540_p3 = {{tmp_4_fu_530_p4}, {8'd0}};

assign lhs_4_fu_711_p3 = {{sum_V_9_reg_302}, {8'd0}};

assign lhs_5_fu_749_p3 = {{tmp_9_fu_739_p4}, {8'd0}};

assign lhs_7_fu_915_p3 = {{sum_V_10_reg_327}, {8'd0}};

assign lhs_8_fu_953_p3 = {{tmp_13_fu_943_p4}, {8'd0}};

assign or_ln75_1_fu_773_p2 = (j_reg_253 | 4'd2);

assign or_ln75_2_fu_977_p2 = (j_reg_253 | 4'd3);

assign or_ln75_fu_569_p2 = (j_reg_253 | 4'd1);

assign or_ln79_1_fu_646_p2 = (empty_29_fu_642_p1 | 4'd1);

assign or_ln79_2_fu_850_p2 = (empty_31_fu_846_p1 | 4'd1);

assign or_ln79_3_fu_1054_p2 = (empty_33_fu_1050_p1 | 4'd1);

assign or_ln79_fu_437_p2 = (empty_27_fu_433_p1 | 4'd1);

assign ret_V_10_fu_1165_p2 = (lhs_11_fu_1157_p3 + mul_ln1192_7_fu_1141_p2);

assign ret_V_4_fu_548_p2 = (lhs_2_fu_540_p3 + mul_ln1192_1_fu_524_p2);

assign ret_V_5_fu_719_p2 = (lhs_4_fu_711_p3 + mul_ln1192_2_fu_705_p2);

assign ret_V_6_fu_757_p2 = (lhs_5_fu_749_p3 + mul_ln1192_3_fu_733_p2);

assign ret_V_7_fu_923_p2 = (lhs_7_fu_915_p3 + mul_ln1192_4_fu_909_p2);

assign ret_V_8_fu_961_p2 = (lhs_8_fu_953_p3 + mul_ln1192_5_fu_937_p2);

assign ret_V_9_fu_1127_p2 = (lhs_10_fu_1119_p3 + mul_ln1192_6_fu_1113_p2);

assign ret_V_fu_510_p2 = (lhs_1_fu_502_p3 + mul_ln1192_fu_496_p2);

assign tmp_10_cast_fu_805_p3 = {{trunc_ln1118_2_fu_801_p1}, {3'd0}};

assign tmp_10_fu_787_p3 = ap_phi_mux_k_2_phi_fu_319_p4[32'd5];

assign tmp_11_fu_861_p3 = {{or_ln79_2_fu_850_p2}, {3'd0}};

assign tmp_12_fu_873_p3 = {{or_ln79_2_fu_850_p2}, {1'd0}};

assign tmp_13_fu_943_p4 = {{ret_V_7_fu_923_p2[39:8]}};

assign tmp_14_fu_991_p3 = ap_phi_mux_k_3_phi_fu_344_p4[32'd5];

assign tmp_15_cast_fu_1009_p3 = {{trunc_ln1118_3_fu_1005_p1}, {3'd0}};

assign tmp_15_fu_1017_p3 = {{ap_phi_mux_k_3_phi_fu_344_p4}, {1'd0}};

assign tmp_16_fu_1065_p3 = {{or_ln79_3_fu_1054_p2}, {3'd0}};

assign tmp_17_fu_1077_p3 = {{or_ln79_3_fu_1054_p2}, {1'd0}};

assign tmp_18_fu_1147_p4 = {{ret_V_9_fu_1127_p2[39:8]}};

assign tmp_1_fu_395_p3 = {{ap_phi_mux_k_phi_fu_269_p4}, {1'd0}};

assign tmp_2_fu_448_p3 = {{or_ln79_fu_437_p2}, {3'd0}};

assign tmp_3_fu_460_p3 = {{or_ln79_fu_437_p2}, {1'd0}};

assign tmp_4_fu_530_p4 = {{ret_V_fu_510_p2[39:8]}};

assign tmp_5_cast_fu_601_p3 = {{trunc_ln1118_1_fu_597_p1}, {3'd0}};

assign tmp_5_fu_583_p3 = ap_phi_mux_k_1_phi_fu_294_p4[32'd5];

assign tmp_6_fu_609_p3 = {{ap_phi_mux_k_1_phi_fu_294_p4}, {1'd0}};

assign tmp_7_fu_657_p3 = {{or_ln79_1_fu_646_p2}, {3'd0}};

assign tmp_8_fu_669_p3 = {{or_ln79_1_fu_646_p2}, {1'd0}};

assign tmp_9_fu_739_p4 = {{ret_V_5_fu_719_p2[39:8]}};

assign tmp_cast_fu_387_p3 = {{trunc_ln1118_fu_383_p1}, {3'd0}};

assign tmp_fu_369_p3 = ap_phi_mux_k_phi_fu_269_p4[32'd5];

assign tmp_s_fu_813_p3 = {{ap_phi_mux_k_2_phi_fu_319_p4}, {1'd0}};

assign trunc_ln1118_1_fu_597_p1 = ap_phi_mux_k_1_phi_fu_294_p4[4:0];

assign trunc_ln1118_2_fu_801_p1 = ap_phi_mux_k_2_phi_fu_319_p4[4:0];

assign trunc_ln1118_3_fu_1005_p1 = ap_phi_mux_k_3_phi_fu_344_p4[4:0];

assign trunc_ln1118_fu_383_p1 = ap_phi_mux_k_phi_fu_269_p4[4:0];

assign zext_ln1118_10_fu_692_p1 = add_ln1118_7_fu_687_p2;

assign zext_ln1118_11_fu_821_p1 = tmp_s_fu_813_p3;

assign zext_ln1118_12_fu_836_p1 = add_ln1118_9_fu_831_p2;

assign zext_ln1118_13_fu_869_p1 = tmp_11_fu_861_p3;

assign zext_ln1118_14_fu_881_p1 = tmp_12_fu_873_p3;

assign zext_ln1118_15_fu_896_p1 = add_ln1118_11_fu_891_p2;

assign zext_ln1118_16_fu_1025_p1 = tmp_15_fu_1017_p3;

assign zext_ln1118_17_fu_1040_p1 = add_ln1118_13_fu_1035_p2;

assign zext_ln1118_18_fu_1073_p1 = tmp_16_fu_1065_p3;

assign zext_ln1118_19_fu_1085_p1 = tmp_17_fu_1077_p3;

assign zext_ln1118_1_fu_413_p1 = j_reg_253;

assign zext_ln1118_20_fu_1100_p1 = add_ln1118_15_fu_1095_p2;

assign zext_ln1118_2_fu_423_p1 = add_ln1118_1_fu_417_p2;

assign zext_ln1118_3_fu_456_p1 = tmp_2_fu_448_p3;

assign zext_ln1118_4_fu_468_p1 = tmp_3_fu_460_p3;

assign zext_ln1118_5_fu_483_p1 = add_ln1118_3_fu_478_p2;

assign zext_ln1118_6_fu_617_p1 = tmp_6_fu_609_p3;

assign zext_ln1118_7_fu_632_p1 = add_ln1118_5_fu_627_p2;

assign zext_ln1118_8_fu_665_p1 = tmp_7_fu_657_p3;

assign zext_ln1118_9_fu_677_p1 = tmp_8_fu_669_p3;

assign zext_ln1118_fu_403_p1 = tmp_1_fu_395_p3;

assign zext_ln77_1_fu_652_p1 = or_ln79_1_fu_646_p2;

assign zext_ln77_2_fu_856_p1 = or_ln79_2_fu_850_p2;

assign zext_ln77_3_fu_1060_p1 = or_ln79_3_fu_1054_p2;

assign zext_ln77_fu_443_p1 = or_ln79_fu_437_p2;

assign zext_ln79_1_fu_779_p1 = or_ln75_1_fu_773_p2;

assign zext_ln79_2_fu_983_p1 = or_ln75_2_fu_977_p2;

assign zext_ln79_3_fu_579_p1 = or_ln75_fu_569_p2;

assign zext_ln79_4_fu_783_p1 = or_ln75_1_fu_773_p2;

assign zext_ln79_5_fu_987_p1 = or_ln75_2_fu_977_p2;

assign zext_ln79_fu_575_p1 = or_ln75_fu_569_p2;

always @ (posedge ap_clk) begin
    zext_ln1118_1_reg_1196[7:4] <= 4'b0000;
    zext_ln79_reg_1226[0] <= 1'b1;
    zext_ln79_reg_1226[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln79_3_reg_1231[0] <= 1'b1;
    zext_ln79_3_reg_1231[7:4] <= 4'b0000;
    zext_ln79_1_reg_1271[1] <= 1'b1;
    zext_ln79_1_reg_1271[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln79_4_reg_1276[1] <= 1'b1;
    zext_ln79_4_reg_1276[7:4] <= 4'b0000;
    zext_ln79_2_reg_1316[1:0] <= 2'b11;
    zext_ln79_2_reg_1316[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln79_5_reg_1321[1:0] <= 2'b11;
    zext_ln79_5_reg_1321[7:4] <= 4'b0000;
end

endmodule //nn_inference_hwmm_layer4
