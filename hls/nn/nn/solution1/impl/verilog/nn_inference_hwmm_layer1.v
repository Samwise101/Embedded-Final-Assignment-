// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_hwmm_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state6 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state10 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state14 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [6:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [5:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] input_r_address0;
reg input_r_ce0;
reg[6:0] input_r_address1;
reg input_r_ce1;
reg[5:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[31:0] output_0_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire  signed [9:0] weights_layer1_weights_V_q0;
reg   [12:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire  signed [9:0] weights_layer1_weights_V_q1;
reg   [6:0] k_reg_263;
reg   [31:0] sum_V_41_reg_274;
reg   [6:0] k_10_reg_287;
reg   [31:0] sum_V_42_reg_298;
reg   [6:0] k_11_reg_311;
reg   [31:0] sum_V_43_reg_322;
reg   [6:0] k_12_reg_335;
reg   [31:0] sum_V_44_reg_346;
wire   [0:0] tmp_fu_359_p3;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln21_fu_367_p1;
reg   [63:0] zext_ln21_reg_933;
wire   [12:0] zext_ln21_1_fu_371_p1;
reg   [12:0] zext_ln21_1_reg_938;
wire   [5:0] trunc_ln21_fu_375_p1;
reg   [5:0] trunc_ln21_reg_943;
wire   [0:0] icmp_ln25_fu_379_p2;
reg   [0:0] icmp_ln25_reg_950;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_950_pp0_iter1_reg;
wire   [6:0] add_ln25_fu_385_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] or_ln25_fu_419_p2;
reg   [6:0] or_ln25_reg_969;
wire   [39:0] mul_ln1192_fu_433_p2;
reg   [39:0] mul_ln1192_reg_975;
reg    ap_enable_reg_pp0_iter2;
wire   [5:0] or_ln21_fu_521_p2;
reg   [5:0] or_ln21_reg_995;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln25_fu_526_p1;
reg   [63:0] zext_ln25_reg_1001;
wire   [0:0] icmp_ln25_1_fu_530_p2;
reg   [0:0] icmp_ln25_1_reg_1006;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_1_reg_1006_pp1_iter1_reg;
wire   [6:0] add_ln25_1_fu_536_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [6:0] or_ln25_1_fu_559_p2;
reg   [6:0] or_ln25_1_reg_1025;
wire   [39:0] mul_ln1192_23_fu_573_p2;
reg   [39:0] mul_ln1192_23_reg_1031;
reg    ap_enable_reg_pp1_iter2;
wire   [5:0] or_ln21_1_fu_655_p2;
reg   [5:0] or_ln21_1_reg_1051;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln25_1_fu_660_p1;
reg   [63:0] zext_ln25_1_reg_1057;
wire   [0:0] icmp_ln25_2_fu_664_p2;
reg   [0:0] icmp_ln25_2_reg_1062;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_state13_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln25_2_reg_1062_pp2_iter1_reg;
wire   [6:0] add_ln25_2_fu_670_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [6:0] or_ln25_2_fu_693_p2;
reg   [6:0] or_ln25_2_reg_1081;
wire   [39:0] mul_ln1192_25_fu_707_p2;
reg   [39:0] mul_ln1192_25_reg_1087;
reg    ap_enable_reg_pp2_iter2;
wire   [5:0] or_ln21_2_fu_789_p2;
reg   [5:0] or_ln21_2_reg_1107;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln25_2_fu_794_p1;
reg   [63:0] zext_ln25_2_reg_1113;
wire   [0:0] icmp_ln25_3_fu_798_p2;
reg   [0:0] icmp_ln25_3_reg_1118;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
wire    ap_block_state17_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln25_3_reg_1118_pp3_iter1_reg;
wire   [6:0] add_ln25_3_fu_804_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [6:0] or_ln25_3_fu_827_p2;
reg   [6:0] or_ln25_3_reg_1137;
wire   [39:0] mul_ln1192_27_fu_841_p2;
reg   [39:0] mul_ln1192_27_reg_1143;
reg    ap_enable_reg_pp3_iter2;
wire   [6:0] add_ln21_fu_923_p2;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter1;
reg    ap_condition_pp3_exit_iter1_state16;
reg   [6:0] j_reg_251;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln1118_fu_414_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] k_cast3_fu_391_p1;
wire   [63:0] zext_ln1118_37_fu_455_p1;
wire   [63:0] zext_ln23_fu_439_p1;
wire   [63:0] zext_ln1118_31_fu_554_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] k_10_cast4_fu_542_p1;
wire   [63:0] zext_ln1118_32_fu_589_p1;
wire   [63:0] zext_ln23_1_fu_579_p1;
wire   [63:0] zext_ln1118_33_fu_688_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] k_11_cast5_fu_676_p1;
wire   [63:0] zext_ln1118_34_fu_723_p1;
wire   [63:0] zext_ln23_2_fu_713_p1;
wire   [63:0] zext_ln1118_35_fu_822_p1;
wire   [63:0] k_12_cast6_fu_810_p1;
wire   [63:0] zext_ln1118_36_fu_857_p1;
wire   [63:0] zext_ln23_3_fu_847_p1;
wire   [5:0] tmp_s_fu_396_p4;
wire   [12:0] tmp_43_fu_406_p3;
wire   [12:0] tmp_44_fu_443_p3;
wire   [12:0] add_ln1118_fu_450_p2;
wire   [39:0] lhs_34_fu_460_p3;
wire   [39:0] ret_V_fu_468_p2;
wire   [31:0] tmp_45_fu_487_p4;
wire   [39:0] lhs_35_fu_497_p3;
wire   [39:0] mul_ln1192_22_fu_481_p2;
wire   [39:0] ret_V_25_fu_505_p2;
wire   [12:0] tmp_46_fu_547_p3;
wire   [12:0] tmp_47_fu_583_p3;
wire   [39:0] lhs_37_fu_594_p3;
wire   [39:0] ret_V_26_fu_602_p2;
wire   [31:0] tmp_48_fu_621_p4;
wire   [39:0] lhs_38_fu_631_p3;
wire   [39:0] mul_ln1192_24_fu_615_p2;
wire   [39:0] ret_V_27_fu_639_p2;
wire   [12:0] tmp_49_fu_681_p3;
wire   [12:0] tmp_50_fu_717_p3;
wire   [39:0] lhs_40_fu_728_p3;
wire   [39:0] ret_V_28_fu_736_p2;
wire   [31:0] tmp_51_fu_755_p4;
wire   [39:0] lhs_41_fu_765_p3;
wire   [39:0] mul_ln1192_26_fu_749_p2;
wire   [39:0] ret_V_29_fu_773_p2;
wire   [12:0] tmp_52_fu_815_p3;
wire   [12:0] tmp_53_fu_851_p3;
wire   [39:0] lhs_43_fu_862_p3;
wire   [39:0] ret_V_30_fu_870_p2;
wire   [31:0] tmp_54_fu_889_p4;
wire   [39:0] lhs_44_fu_899_p3;
wire   [39:0] mul_ln1192_28_fu_883_p2;
wire   [39:0] ret_V_31_fu_907_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

nn_inference_hwmm_layer1_weights_layer1_weights_V #(
    .DataWidth( 10 ),
    .AddressRange( 6400 ),
    .AddressWidth( 13 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U1(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(mul_ln1192_fu_433_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U2(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(mul_ln1192_22_fu_481_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U3(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(mul_ln1192_23_fu_573_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U4(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(mul_ln1192_24_fu_615_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U5(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(mul_ln1192_25_fu_707_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U6(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(mul_ln1192_26_fu_749_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U7(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(mul_ln1192_27_fu_841_p2)
);

nn_inference_mul_10s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_10s_32s_40_1_1_U8(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(mul_ln1192_28_fu_883_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_359_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((tmp_fu_359_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_251 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_reg_251 <= add_ln21_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_10_reg_287 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_1_fu_530_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_10_reg_287 <= add_ln25_1_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_11_reg_311 <= 7'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln25_2_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        k_11_reg_311 <= add_ln25_2_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_12_reg_335 <= 7'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln25_3_fu_798_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        k_12_reg_335 <= add_ln25_3_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_359_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_263 <= 7'd0;
    end else if (((icmp_ln25_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_263 <= add_ln25_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_359_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_V_41_reg_274 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln25_reg_950_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_41_reg_274 <= {{ret_V_25_fu_505_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_V_42_reg_298 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_1_reg_1006_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_42_reg_298 <= {{ret_V_27_fu_639_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_43_reg_322 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln25_2_reg_1062_pp2_iter1_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sum_V_43_reg_322 <= {{ret_V_29_fu_773_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_V_44_reg_346 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln25_3_reg_1118_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sum_V_44_reg_346 <= {{ret_V_31_fu_907_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln25_1_reg_1006 <= icmp_ln25_1_fu_530_p2;
        icmp_ln25_1_reg_1006_pp1_iter1_reg <= icmp_ln25_1_reg_1006;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln25_2_reg_1062 <= icmp_ln25_2_fu_664_p2;
        icmp_ln25_2_reg_1062_pp2_iter1_reg <= icmp_ln25_2_reg_1062;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln25_3_reg_1118 <= icmp_ln25_3_fu_798_p2;
        icmp_ln25_3_reg_1118_pp3_iter1_reg <= icmp_ln25_3_reg_1118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_950 <= icmp_ln25_fu_379_p2;
        icmp_ln25_reg_950_pp0_iter1_reg <= icmp_ln25_reg_950;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_1_reg_1006 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_ln1192_23_reg_1031 <= mul_ln1192_23_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_2_reg_1062 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        mul_ln1192_25_reg_1087 <= mul_ln1192_25_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_3_reg_1118 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_27_reg_1143 <= mul_ln1192_27_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_950 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1192_reg_975 <= mul_ln1192_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        or_ln21_1_reg_1051[0] <= or_ln21_1_fu_655_p2[0];
or_ln21_1_reg_1051[5 : 2] <= or_ln21_1_fu_655_p2[5 : 2];
        zext_ln25_1_reg_1057[0] <= zext_ln25_1_fu_660_p1[0];
zext_ln25_1_reg_1057[5 : 2] <= zext_ln25_1_fu_660_p1[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        or_ln21_2_reg_1107[5 : 2] <= or_ln21_2_fu_789_p2[5 : 2];
        zext_ln25_2_reg_1113[5 : 2] <= zext_ln25_2_fu_794_p1[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_ln21_reg_995[5 : 1] <= or_ln21_fu_521_p2[5 : 1];
        zext_ln25_reg_1001[5 : 1] <= zext_ln25_fu_526_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_1_fu_530_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        or_ln25_1_reg_1025[6 : 1] <= or_ln25_1_fu_559_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_2_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        or_ln25_2_reg_1081[6 : 1] <= or_ln25_2_fu_693_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_3_fu_798_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        or_ln25_3_reg_1137[6 : 1] <= or_ln25_3_fu_827_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln25_reg_969[6 : 1] <= or_ln25_fu_419_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_359_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln21_reg_943 <= trunc_ln21_fu_375_p1;
        zext_ln21_1_reg_938[6 : 0] <= zext_ln21_1_fu_371_p1[6 : 0];
        zext_ln21_reg_933[6 : 0] <= zext_ln21_fu_367_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_379_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_1_fu_530_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_2_fu_664_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_condition_pp3_exit_iter1_state16 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_3_fu_798_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_359_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_359_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        input_r_address0 = zext_ln23_3_fu_847_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        input_r_address0 = zext_ln23_2_fu_713_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        input_r_address0 = zext_ln23_1_fu_579_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_r_address0 = zext_ln23_fu_439_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        input_r_address1 = k_12_cast6_fu_810_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        input_r_address1 = k_11_cast5_fu_676_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        input_r_address1 = k_10_cast4_fu_542_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        input_r_address1 = k_cast3_fu_391_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_address0 = zext_ln25_2_reg_1113;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_address0 = zext_ln25_1_reg_1057;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_address0 = zext_ln25_reg_1001;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_address0 = zext_ln21_reg_933;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_d0 = sum_V_44_reg_346;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_d0 = sum_V_43_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_d0 = sum_V_42_reg_298;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_d0 = sum_V_41_reg_274;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_36_fu_857_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_34_fu_723_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_32_fu_589_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_37_fu_455_p1;
    end else begin
        weights_layer1_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_35_fu_822_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_33_fu_688_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_31_fu_554_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_fu_414_p1;
    end else begin
        weights_layer1_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_359_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln25_fu_379_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln25_fu_379_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_1_fu_530_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_1_fu_530_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln25_2_fu_664_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln25_2_fu_664_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_fu_450_p2 = (tmp_44_fu_443_p3 + zext_ln21_1_reg_938);

assign add_ln21_fu_923_p2 = (j_reg_251 + 7'd4);

assign add_ln25_1_fu_536_p2 = (k_10_reg_287 + 7'd2);

assign add_ln25_2_fu_670_p2 = (k_11_reg_311 + 7'd2);

assign add_ln25_3_fu_804_p2 = (k_12_reg_335 + 7'd2);

assign add_ln25_fu_385_p2 = (k_reg_263 + 7'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign icmp_ln25_1_fu_530_p2 = ((k_10_reg_287 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln25_2_fu_664_p2 = ((k_11_reg_311 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln25_3_fu_798_p2 = ((k_12_reg_335 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_379_p2 = ((k_reg_263 < 7'd100) ? 1'b1 : 1'b0);

assign k_10_cast4_fu_542_p1 = k_10_reg_287;

assign k_11_cast5_fu_676_p1 = k_11_reg_311;

assign k_12_cast6_fu_810_p1 = k_12_reg_335;

assign k_cast3_fu_391_p1 = k_reg_263;

assign lhs_34_fu_460_p3 = {{sum_V_41_reg_274}, {8'd0}};

assign lhs_35_fu_497_p3 = {{tmp_45_fu_487_p4}, {8'd0}};

assign lhs_37_fu_594_p3 = {{sum_V_42_reg_298}, {8'd0}};

assign lhs_38_fu_631_p3 = {{tmp_48_fu_621_p4}, {8'd0}};

assign lhs_40_fu_728_p3 = {{sum_V_43_reg_322}, {8'd0}};

assign lhs_41_fu_765_p3 = {{tmp_51_fu_755_p4}, {8'd0}};

assign lhs_43_fu_862_p3 = {{sum_V_44_reg_346}, {8'd0}};

assign lhs_44_fu_899_p3 = {{tmp_54_fu_889_p4}, {8'd0}};

assign or_ln21_1_fu_655_p2 = (trunc_ln21_reg_943 | 6'd2);

assign or_ln21_2_fu_789_p2 = (trunc_ln21_reg_943 | 6'd3);

assign or_ln21_fu_521_p2 = (trunc_ln21_reg_943 | 6'd1);

assign or_ln25_1_fu_559_p2 = (k_10_reg_287 | 7'd1);

assign or_ln25_2_fu_693_p2 = (k_11_reg_311 | 7'd1);

assign or_ln25_3_fu_827_p2 = (k_12_reg_335 | 7'd1);

assign or_ln25_fu_419_p2 = (k_reg_263 | 7'd1);

assign ret_V_25_fu_505_p2 = (lhs_35_fu_497_p3 + mul_ln1192_22_fu_481_p2);

assign ret_V_26_fu_602_p2 = (lhs_37_fu_594_p3 + mul_ln1192_23_reg_1031);

assign ret_V_27_fu_639_p2 = (lhs_38_fu_631_p3 + mul_ln1192_24_fu_615_p2);

assign ret_V_28_fu_736_p2 = (lhs_40_fu_728_p3 + mul_ln1192_25_reg_1087);

assign ret_V_29_fu_773_p2 = (lhs_41_fu_765_p3 + mul_ln1192_26_fu_749_p2);

assign ret_V_30_fu_870_p2 = (lhs_43_fu_862_p3 + mul_ln1192_27_reg_1143);

assign ret_V_31_fu_907_p2 = (lhs_44_fu_899_p3 + mul_ln1192_28_fu_883_p2);

assign ret_V_fu_468_p2 = (lhs_34_fu_460_p3 + mul_ln1192_reg_975);

assign tmp_43_fu_406_p3 = {{tmp_s_fu_396_p4}, {j_reg_251}};

assign tmp_44_fu_443_p3 = {{or_ln25_reg_969}, {6'd0}};

assign tmp_45_fu_487_p4 = {{ret_V_fu_468_p2[39:8]}};

assign tmp_46_fu_547_p3 = {{k_10_reg_287}, {or_ln21_reg_995}};

assign tmp_47_fu_583_p3 = {{or_ln25_1_reg_1025}, {or_ln21_reg_995}};

assign tmp_48_fu_621_p4 = {{ret_V_26_fu_602_p2[39:8]}};

assign tmp_49_fu_681_p3 = {{k_11_reg_311}, {or_ln21_1_reg_1051}};

assign tmp_50_fu_717_p3 = {{or_ln25_2_reg_1081}, {or_ln21_1_reg_1051}};

assign tmp_51_fu_755_p4 = {{ret_V_28_fu_736_p2[39:8]}};

assign tmp_52_fu_815_p3 = {{k_12_reg_335}, {or_ln21_2_reg_1107}};

assign tmp_53_fu_851_p3 = {{or_ln25_3_reg_1137}, {or_ln21_2_reg_1107}};

assign tmp_54_fu_889_p4 = {{ret_V_30_fu_870_p2[39:8]}};

assign tmp_fu_359_p3 = j_reg_251[32'd6];

assign tmp_s_fu_396_p4 = {{k_reg_263[6:1]}};

assign trunc_ln21_fu_375_p1 = j_reg_251[5:0];

assign zext_ln1118_31_fu_554_p1 = tmp_46_fu_547_p3;

assign zext_ln1118_32_fu_589_p1 = tmp_47_fu_583_p3;

assign zext_ln1118_33_fu_688_p1 = tmp_49_fu_681_p3;

assign zext_ln1118_34_fu_723_p1 = tmp_50_fu_717_p3;

assign zext_ln1118_35_fu_822_p1 = tmp_52_fu_815_p3;

assign zext_ln1118_36_fu_857_p1 = tmp_53_fu_851_p3;

assign zext_ln1118_37_fu_455_p1 = add_ln1118_fu_450_p2;

assign zext_ln1118_fu_414_p1 = tmp_43_fu_406_p3;

assign zext_ln21_1_fu_371_p1 = j_reg_251;

assign zext_ln21_fu_367_p1 = j_reg_251;

assign zext_ln23_1_fu_579_p1 = or_ln25_1_reg_1025;

assign zext_ln23_2_fu_713_p1 = or_ln25_2_reg_1081;

assign zext_ln23_3_fu_847_p1 = or_ln25_3_reg_1137;

assign zext_ln23_fu_439_p1 = or_ln25_reg_969;

assign zext_ln25_1_fu_660_p1 = or_ln21_1_fu_655_p2;

assign zext_ln25_2_fu_794_p1 = or_ln21_2_fu_789_p2;

assign zext_ln25_fu_526_p1 = or_ln21_fu_521_p2;

always @ (posedge ap_clk) begin
    zext_ln21_reg_933[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_938[12:7] <= 6'b000000;
    or_ln25_reg_969[0] <= 1'b1;
    or_ln21_reg_995[0] <= 1'b1;
    zext_ln25_reg_1001[0] <= 1'b1;
    zext_ln25_reg_1001[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    or_ln25_1_reg_1025[0] <= 1'b1;
    or_ln21_1_reg_1051[1] <= 1'b1;
    zext_ln25_1_reg_1057[1] <= 1'b1;
    zext_ln25_1_reg_1057[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    or_ln25_2_reg_1081[0] <= 1'b1;
    or_ln21_2_reg_1107[1:0] <= 2'b11;
    zext_ln25_2_reg_1113[1:0] <= 2'b11;
    zext_ln25_2_reg_1113[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    or_ln25_3_reg_1137[0] <= 1'b1;
end

endmodule //nn_inference_hwmm_layer1
