-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_img_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=3622,HLS_SYN_LUT=14064,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFF00 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111100000000";
    constant ap_const_lv32_FFFF8200 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111000001000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_257 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_268 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_idx_V_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln5_fu_354_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln5_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_796_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_796_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_800 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_800_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_800_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input_img_load_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_img_load_reg_810_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln565_fu_406_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_825 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_838 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln138_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln138_fu_648_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln138_reg_850 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal or_ln138_fu_659_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln138_reg_860 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_val_V_3_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal max_idx_V_3_fu_729_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_hwmm_layer4_fu_327_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal fp_input_img_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fp_input_img_V_ce0 : STD_LOGIC;
    signal fp_input_img_V_we0 : STD_LOGIC;
    signal fp_input_img_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_input_img_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_input_img_V_ce1 : STD_LOGIC;
    signal fp_input_img_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_output_0_V_ce0 : STD_LOGIC;
    signal temp_output_0_V_we0 : STD_LOGIC;
    signal temp_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_output_0_V_ce1 : STD_LOGIC;
    signal temp_output_0_V_we1 : STD_LOGIC;
    signal temp_output_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_output2_0_V_ce0 : STD_LOGIC;
    signal temp_output2_0_V_we0 : STD_LOGIC;
    signal temp_output2_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_output2_0_V_ce1 : STD_LOGIC;
    signal temp_output2_0_V_we1 : STD_LOGIC;
    signal temp_output2_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output3_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_output3_0_V_ce0 : STD_LOGIC;
    signal temp_output3_0_V_we0 : STD_LOGIC;
    signal temp_output3_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output3_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output3_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_output3_0_V_ce1 : STD_LOGIC;
    signal temp_output3_0_V_we1 : STD_LOGIC;
    signal temp_output3_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output4_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_output4_0_V_ce0 : STD_LOGIC;
    signal temp_output4_0_V_we0 : STD_LOGIC;
    signal temp_output4_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output4_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output4_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_output4_0_V_ce1 : STD_LOGIC;
    signal temp_output4_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_304_ap_start : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_ap_done : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_output_0_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hw_act_layer1_fu_304_output_0_V_ce0 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_output_0_V_we0 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_304_output_0_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hw_act_layer1_fu_304_output_0_V_ce1 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_output_0_V_we1 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_304_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_304_grp_fu_880_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer1_fu_304_grp_fu_880_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer1_fu_304_grp_fu_880_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_304_grp_fu_880_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer1_fu_304_grp_fu_880_p_ce : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_ap_start : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_ap_done : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_output_0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_309_output_0_V_ce0 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_output_0_V_we0 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_309_output_0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_309_output_0_V_ce1 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_output_0_V_we1 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_309_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_309_grp_fu_880_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer2_fu_309_grp_fu_880_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer2_fu_309_grp_fu_880_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_309_grp_fu_880_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer2_fu_309_grp_fu_880_p_ce : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_ap_start : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_ap_done : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_output_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hw_act_layer3_fu_314_output_0_V_ce0 : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_output_0_V_we0 : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer3_fu_314_output_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hw_act_layer3_fu_314_output_0_V_ce1 : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_output_0_V_we1 : STD_LOGIC;
    signal grp_hw_act_layer3_fu_314_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer3_fu_314_grp_fu_880_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer3_fu_314_grp_fu_880_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer3_fu_314_grp_fu_880_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer3_fu_314_grp_fu_880_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer3_fu_314_grp_fu_880_p_ce : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_ap_start : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_ap_done : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hwmm_layer1_fu_319_input_r_ce0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_input_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hwmm_layer1_fu_319_input_r_ce1 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_output_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hwmm_layer1_fu_319_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_319_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer4_fu_327_ap_start : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_input_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hwmm_layer4_fu_327_input_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_input_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hwmm_layer4_fu_327_input_0_ce1 : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_output_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hwmm_layer4_fu_327_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer4_fu_327_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer2_fu_335_ap_start : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_ap_done : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_input_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hwmm_layer2_fu_335_input_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_input_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hwmm_layer2_fu_335_input_0_ce1 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer2_fu_335_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer2_fu_335_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer3_fu_343_ap_start : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_ap_done : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_input_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer3_fu_343_input_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_input_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer3_fu_343_input_0_ce1 : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_output_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hwmm_layer3_fu_343_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer3_fu_343_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_1_phi_fu_272_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_hw_act_layer1_fu_304_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_hw_act_layer2_fu_309_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_hw_act_layer3_fu_314_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_hwmm_layer1_fu_319_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_hwmm_layer4_fu_327_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_hwmm_layer2_fu_335_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_hwmm_layer3_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln731_1_cast_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_4_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_392_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln555_fu_380_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_2_fu_422_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_429_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_433_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_451_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_456_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_461_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_439_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_482_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln581_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_498_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_502_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_1_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln582_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_591_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_1_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_3_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_2_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_684_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln140_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_1_fu_676_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_1_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln140_1_fu_718_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln140_1_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_idx_V_1_fu_696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln851_fu_755_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_737_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln851_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_765_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_747_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_771_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_3_fu_779_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_880_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_880_ce : STD_LOGIC;
    signal grp_fu_880_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_hw_act_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_880_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_880_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_880_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_880_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_880_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hw_act_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_880_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_880_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_880_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_880_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_880_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hw_act_layer3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_880_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_880_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_880_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_880_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_880_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hwmm_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_hwmm_layer4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_hwmm_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_hwmm_layer3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nn_inference_fp_input_img_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output2_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output3_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output4_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fp_input_img_V_U : component nn_inference_fp_input_img_V
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fp_input_img_V_address0,
        ce0 => fp_input_img_V_ce0,
        we0 => fp_input_img_V_we0,
        d0 => fp_input_img_V_d0,
        q0 => fp_input_img_V_q0,
        address1 => grp_hwmm_layer1_fu_319_input_r_address1,
        ce1 => fp_input_img_V_ce1,
        q1 => fp_input_img_V_q1);

    temp_output_0_V_U : component nn_inference_temp_output_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output_0_V_address0,
        ce0 => temp_output_0_V_ce0,
        we0 => temp_output_0_V_we0,
        d0 => temp_output_0_V_d0,
        q0 => temp_output_0_V_q0,
        address1 => temp_output_0_V_address1,
        ce1 => temp_output_0_V_ce1,
        we1 => temp_output_0_V_we1,
        d1 => grp_hw_act_layer1_fu_304_output_0_V_d1,
        q1 => temp_output_0_V_q1);

    temp_output2_0_V_U : component nn_inference_temp_output2_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output2_0_V_address0,
        ce0 => temp_output2_0_V_ce0,
        we0 => temp_output2_0_V_we0,
        d0 => temp_output2_0_V_d0,
        q0 => temp_output2_0_V_q0,
        address1 => temp_output2_0_V_address1,
        ce1 => temp_output2_0_V_ce1,
        we1 => temp_output2_0_V_we1,
        d1 => grp_hw_act_layer2_fu_309_output_0_V_d1,
        q1 => temp_output2_0_V_q1);

    temp_output3_0_V_U : component nn_inference_temp_output3_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output3_0_V_address0,
        ce0 => temp_output3_0_V_ce0,
        we0 => temp_output3_0_V_we0,
        d0 => temp_output3_0_V_d0,
        q0 => temp_output3_0_V_q0,
        address1 => temp_output3_0_V_address1,
        ce1 => temp_output3_0_V_ce1,
        we1 => temp_output3_0_V_we1,
        d1 => grp_hw_act_layer3_fu_314_output_0_V_d1,
        q1 => temp_output3_0_V_q1);

    temp_output4_0_V_U : component nn_inference_temp_output4_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output4_0_V_address0,
        ce0 => temp_output4_0_V_ce0,
        we0 => temp_output4_0_V_we0,
        d0 => temp_output4_0_V_d0,
        q0 => temp_output4_0_V_q0,
        address1 => temp_output4_0_V_address1,
        ce1 => temp_output4_0_V_ce1,
        q1 => temp_output4_0_V_q1);

    grp_hw_act_layer1_fu_304 : component nn_inference_hw_act_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hw_act_layer1_fu_304_ap_start,
        ap_done => grp_hw_act_layer1_fu_304_ap_done,
        ap_idle => grp_hw_act_layer1_fu_304_ap_idle,
        ap_ready => grp_hw_act_layer1_fu_304_ap_ready,
        output_0_V_address0 => grp_hw_act_layer1_fu_304_output_0_V_address0,
        output_0_V_ce0 => grp_hw_act_layer1_fu_304_output_0_V_ce0,
        output_0_V_we0 => grp_hw_act_layer1_fu_304_output_0_V_we0,
        output_0_V_d0 => grp_hw_act_layer1_fu_304_output_0_V_d0,
        output_0_V_q0 => temp_output_0_V_q0,
        output_0_V_address1 => grp_hw_act_layer1_fu_304_output_0_V_address1,
        output_0_V_ce1 => grp_hw_act_layer1_fu_304_output_0_V_ce1,
        output_0_V_we1 => grp_hw_act_layer1_fu_304_output_0_V_we1,
        output_0_V_d1 => grp_hw_act_layer1_fu_304_output_0_V_d1,
        output_0_V_q1 => temp_output_0_V_q1,
        grp_fu_880_p_din0 => grp_hw_act_layer1_fu_304_grp_fu_880_p_din0,
        grp_fu_880_p_din1 => grp_hw_act_layer1_fu_304_grp_fu_880_p_din1,
        grp_fu_880_p_opcode => grp_hw_act_layer1_fu_304_grp_fu_880_p_opcode,
        grp_fu_880_p_dout0 => grp_hw_act_layer1_fu_304_grp_fu_880_p_dout0,
        grp_fu_880_p_ce => grp_hw_act_layer1_fu_304_grp_fu_880_p_ce);

    grp_hw_act_layer2_fu_309 : component nn_inference_hw_act_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hw_act_layer2_fu_309_ap_start,
        ap_done => grp_hw_act_layer2_fu_309_ap_done,
        ap_idle => grp_hw_act_layer2_fu_309_ap_idle,
        ap_ready => grp_hw_act_layer2_fu_309_ap_ready,
        output_0_V_address0 => grp_hw_act_layer2_fu_309_output_0_V_address0,
        output_0_V_ce0 => grp_hw_act_layer2_fu_309_output_0_V_ce0,
        output_0_V_we0 => grp_hw_act_layer2_fu_309_output_0_V_we0,
        output_0_V_d0 => grp_hw_act_layer2_fu_309_output_0_V_d0,
        output_0_V_q0 => temp_output2_0_V_q0,
        output_0_V_address1 => grp_hw_act_layer2_fu_309_output_0_V_address1,
        output_0_V_ce1 => grp_hw_act_layer2_fu_309_output_0_V_ce1,
        output_0_V_we1 => grp_hw_act_layer2_fu_309_output_0_V_we1,
        output_0_V_d1 => grp_hw_act_layer2_fu_309_output_0_V_d1,
        output_0_V_q1 => temp_output2_0_V_q1,
        grp_fu_880_p_din0 => grp_hw_act_layer2_fu_309_grp_fu_880_p_din0,
        grp_fu_880_p_din1 => grp_hw_act_layer2_fu_309_grp_fu_880_p_din1,
        grp_fu_880_p_opcode => grp_hw_act_layer2_fu_309_grp_fu_880_p_opcode,
        grp_fu_880_p_dout0 => grp_hw_act_layer2_fu_309_grp_fu_880_p_dout0,
        grp_fu_880_p_ce => grp_hw_act_layer2_fu_309_grp_fu_880_p_ce);

    grp_hw_act_layer3_fu_314 : component nn_inference_hw_act_layer3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hw_act_layer3_fu_314_ap_start,
        ap_done => grp_hw_act_layer3_fu_314_ap_done,
        ap_idle => grp_hw_act_layer3_fu_314_ap_idle,
        ap_ready => grp_hw_act_layer3_fu_314_ap_ready,
        output_0_V_address0 => grp_hw_act_layer3_fu_314_output_0_V_address0,
        output_0_V_ce0 => grp_hw_act_layer3_fu_314_output_0_V_ce0,
        output_0_V_we0 => grp_hw_act_layer3_fu_314_output_0_V_we0,
        output_0_V_d0 => grp_hw_act_layer3_fu_314_output_0_V_d0,
        output_0_V_q0 => temp_output3_0_V_q0,
        output_0_V_address1 => grp_hw_act_layer3_fu_314_output_0_V_address1,
        output_0_V_ce1 => grp_hw_act_layer3_fu_314_output_0_V_ce1,
        output_0_V_we1 => grp_hw_act_layer3_fu_314_output_0_V_we1,
        output_0_V_d1 => grp_hw_act_layer3_fu_314_output_0_V_d1,
        output_0_V_q1 => temp_output3_0_V_q1,
        grp_fu_880_p_din0 => grp_hw_act_layer3_fu_314_grp_fu_880_p_din0,
        grp_fu_880_p_din1 => grp_hw_act_layer3_fu_314_grp_fu_880_p_din1,
        grp_fu_880_p_opcode => grp_hw_act_layer3_fu_314_grp_fu_880_p_opcode,
        grp_fu_880_p_dout0 => grp_hw_act_layer3_fu_314_grp_fu_880_p_dout0,
        grp_fu_880_p_ce => grp_hw_act_layer3_fu_314_grp_fu_880_p_ce);

    grp_hwmm_layer1_fu_319 : component nn_inference_hwmm_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hwmm_layer1_fu_319_ap_start,
        ap_done => grp_hwmm_layer1_fu_319_ap_done,
        ap_idle => grp_hwmm_layer1_fu_319_ap_idle,
        ap_ready => grp_hwmm_layer1_fu_319_ap_ready,
        input_r_address0 => grp_hwmm_layer1_fu_319_input_r_address0,
        input_r_ce0 => grp_hwmm_layer1_fu_319_input_r_ce0,
        input_r_q0 => fp_input_img_V_q0,
        input_r_address1 => grp_hwmm_layer1_fu_319_input_r_address1,
        input_r_ce1 => grp_hwmm_layer1_fu_319_input_r_ce1,
        input_r_q1 => fp_input_img_V_q1,
        output_0_address0 => grp_hwmm_layer1_fu_319_output_0_address0,
        output_0_ce0 => grp_hwmm_layer1_fu_319_output_0_ce0,
        output_0_we0 => grp_hwmm_layer1_fu_319_output_0_we0,
        output_0_d0 => grp_hwmm_layer1_fu_319_output_0_d0);

    grp_hwmm_layer4_fu_327 : component nn_inference_hwmm_layer4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hwmm_layer4_fu_327_ap_start,
        ap_done => grp_hwmm_layer4_fu_327_ap_done,
        ap_idle => grp_hwmm_layer4_fu_327_ap_idle,
        ap_ready => grp_hwmm_layer4_fu_327_ap_ready,
        input_0_address0 => grp_hwmm_layer4_fu_327_input_0_address0,
        input_0_ce0 => grp_hwmm_layer4_fu_327_input_0_ce0,
        input_0_q0 => temp_output3_0_V_q0,
        input_0_address1 => grp_hwmm_layer4_fu_327_input_0_address1,
        input_0_ce1 => grp_hwmm_layer4_fu_327_input_0_ce1,
        input_0_q1 => temp_output3_0_V_q1,
        output_0_address0 => grp_hwmm_layer4_fu_327_output_0_address0,
        output_0_ce0 => grp_hwmm_layer4_fu_327_output_0_ce0,
        output_0_we0 => grp_hwmm_layer4_fu_327_output_0_we0,
        output_0_d0 => grp_hwmm_layer4_fu_327_output_0_d0);

    grp_hwmm_layer2_fu_335 : component nn_inference_hwmm_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hwmm_layer2_fu_335_ap_start,
        ap_done => grp_hwmm_layer2_fu_335_ap_done,
        ap_idle => grp_hwmm_layer2_fu_335_ap_idle,
        ap_ready => grp_hwmm_layer2_fu_335_ap_ready,
        input_0_address0 => grp_hwmm_layer2_fu_335_input_0_address0,
        input_0_ce0 => grp_hwmm_layer2_fu_335_input_0_ce0,
        input_0_q0 => temp_output_0_V_q0,
        input_0_address1 => grp_hwmm_layer2_fu_335_input_0_address1,
        input_0_ce1 => grp_hwmm_layer2_fu_335_input_0_ce1,
        input_0_q1 => temp_output_0_V_q1,
        output_0_address0 => grp_hwmm_layer2_fu_335_output_0_address0,
        output_0_ce0 => grp_hwmm_layer2_fu_335_output_0_ce0,
        output_0_we0 => grp_hwmm_layer2_fu_335_output_0_we0,
        output_0_d0 => grp_hwmm_layer2_fu_335_output_0_d0);

    grp_hwmm_layer3_fu_343 : component nn_inference_hwmm_layer3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hwmm_layer3_fu_343_ap_start,
        ap_done => grp_hwmm_layer3_fu_343_ap_done,
        ap_idle => grp_hwmm_layer3_fu_343_ap_idle,
        ap_ready => grp_hwmm_layer3_fu_343_ap_ready,
        input_0_address0 => grp_hwmm_layer3_fu_343_input_0_address0,
        input_0_ce0 => grp_hwmm_layer3_fu_343_input_0_ce0,
        input_0_q0 => temp_output2_0_V_q0,
        input_0_address1 => grp_hwmm_layer3_fu_343_input_0_address1,
        input_0_ce1 => grp_hwmm_layer3_fu_343_input_0_ce1,
        input_0_q1 => temp_output2_0_V_q1,
        output_0_address0 => grp_hwmm_layer3_fu_343_output_0_address0,
        output_0_ce0 => grp_hwmm_layer3_fu_343_output_0_ce0,
        output_0_we0 => grp_hwmm_layer3_fu_343_output_0_we0,
        output_0_d0 => grp_hwmm_layer3_fu_343_output_0_d0);

    fpext_32ns_64_2_no_dsp_1_U55 : component nn_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_351_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_351_p1);

    dcmp_64ns_64ns_1_2_no_dsp_1_U56 : component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_880_p0,
        din1 => grp_fu_880_p1,
        ce => grp_fu_880_ce,
        opcode => grp_fu_880_opcode,
        dout => grp_fu_880_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_hwmm_layer4_fu_327_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_hwmm_layer4_fu_327_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer1_fu_304_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hw_act_layer1_fu_304_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_hw_act_layer1_fu_304_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer1_fu_304_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer1_fu_304_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer2_fu_309_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hw_act_layer2_fu_309_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_hw_act_layer2_fu_309_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer2_fu_309_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer2_fu_309_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer3_fu_314_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hw_act_layer3_fu_314_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_hw_act_layer3_fu_314_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer3_fu_314_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer3_fu_314_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer1_fu_319_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hwmm_layer1_fu_319_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_hwmm_layer1_fu_319_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer1_fu_319_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer1_fu_319_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer2_fu_335_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hwmm_layer2_fu_335_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_hwmm_layer2_fu_335_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer2_fu_335_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer2_fu_335_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer3_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hwmm_layer3_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_hwmm_layer3_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer3_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer3_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer4_fu_327_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hwmm_layer4_fu_327_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_hwmm_layer4_fu_327_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer4_fu_327_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer4_fu_327_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_hwmm_layer4_fu_327_ap_done = ap_const_logic_1))) then 
                i_1_reg_268 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln138_reg_846 = ap_const_lv1_1))) then 
                i_1_reg_268 <= add_ln138_reg_850;
            end if; 
        end if;
    end process;

    i_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_257 <= ap_const_lv7_0;
            elsif (((icmp_ln5_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_257 <= add_ln5_fu_354_p2;
            end if; 
        end if;
    end process;

    max_idx_V_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_hwmm_layer4_fu_327_ap_done = ap_const_logic_1))) then 
                max_idx_V_reg_280 <= ap_const_lv32_FFFFFF00;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln138_reg_846 = ap_const_lv1_1))) then 
                max_idx_V_reg_280 <= max_idx_V_3_fu_729_p3;
            end if; 
        end if;
    end process;

    max_val_V_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_hwmm_layer4_fu_327_ap_done = ap_const_logic_1))) then 
                max_val_V_reg_292 <= ap_const_lv32_FFFF8200;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln138_reg_846 = ap_const_lv1_1))) then 
                max_val_V_reg_292 <= max_val_V_3_fu_710_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_796_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                F2_reg_838 <= F2_fu_416_p2;
                icmp_ln571_reg_830 <= icmp_ln571_fu_410_p2;
                p_Result_1_reg_820 <= ireg_fu_376_p1(63 downto 63);
                trunc_ln565_reg_825 <= trunc_ln565_fu_406_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln138_fu_642_p2 = ap_const_lv1_1))) then
                add_ln138_reg_850 <= add_ln138_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast_reg_800(6 downto 0) <= i_cast_fu_366_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast_reg_800_pp0_iter1_reg(6 downto 0) <= i_cast_reg_800(6 downto 0);
                icmp_ln5_reg_796 <= icmp_ln5_fu_360_p2;
                icmp_ln5_reg_796_pp0_iter1_reg <= icmp_ln5_reg_796;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    i_cast_reg_800_pp0_iter2_reg(6 downto 0) <= i_cast_reg_800_pp0_iter1_reg(6 downto 0);
                icmp_ln5_reg_796_pp0_iter2_reg <= icmp_ln5_reg_796_pp0_iter1_reg;
                input_img_load_reg_810_pp0_iter2_reg <= input_img_load_reg_810;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln138_reg_846 <= icmp_ln138_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_img_load_reg_810 <= input_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln138_fu_642_p2 = ap_const_lv1_1))) then
                    or_ln138_reg_860(3 downto 1) <= or_ln138_fu_659_p2(3 downto 1);
            end if;
        end if;
    end process;
    i_cast_reg_800(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_800_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_800_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    or_ln138_reg_860(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln5_fu_360_p2, icmp_ln138_fu_642_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_state20, grp_hwmm_layer4_fu_327_ap_done, ap_block_pp1_stage0_subdone, grp_hw_act_layer1_fu_304_ap_done, grp_hw_act_layer2_fu_309_ap_done, grp_hw_act_layer3_fu_314_ap_done, grp_hwmm_layer1_fu_319_ap_done, grp_hwmm_layer2_fu_335_ap_done, grp_hwmm_layer3_fu_343_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln5_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln5_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_hwmm_layer1_fu_319_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_hw_act_layer1_fu_304_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_hwmm_layer2_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_hw_act_layer2_fu_309_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_hwmm_layer3_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_hw_act_layer3_fu_314_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_hwmm_layer4_fu_327_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln138_fu_642_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln138_fu_642_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_402_p1));
    add_ln138_fu_648_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_272_p4) + unsigned(ap_const_lv4_2));
    add_ln581_fu_451_p2 <= std_logic_vector(unsigned(F2_reg_838) + unsigned(ap_const_lv12_FF8));
    add_ln5_fu_354_p2 <= std_logic_vector(unsigned(i_reg_257) + unsigned(ap_const_lv7_1));
    and_ln581_fu_555_p2 <= (xor_ln582_fu_549_p2 and icmp_ln581_fu_446_p2);
    and_ln582_fu_538_p2 <= (xor_ln571_fu_533_p2 and icmp_ln582_fu_473_p2);
    and_ln585_fu_567_p2 <= (icmp_ln585_fu_561_p2 and and_ln581_fu_555_p2);
    and_ln603_fu_585_p2 <= (xor_ln581_fu_579_p2 and icmp_ln603_fu_492_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln5_fu_360_p2)
    begin
        if ((icmp_ln5_fu_360_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(icmp_ln138_fu_642_p2)
    begin
        if ((icmp_ln138_fu_642_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_272_p4_assign_proc : process(i_1_reg_268, icmp_ln138_reg_846, ap_CS_fsm_pp1_stage0, add_ln138_reg_850, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln138_reg_846 = ap_const_lv1_1))) then 
            ap_phi_mux_i_1_phi_fu_272_p4 <= add_ln138_reg_850;
        else 
            ap_phi_mux_i_1_phi_fu_272_p4 <= i_1_reg_268;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_3_fu_779_p3),32));

    ashr_ln586_fu_502_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_439_p3),to_integer(unsigned('0' & zext_ln586_fu_498_p1(31-1 downto 0)))));
    exp_tmp_fu_392_p4 <= ireg_fu_376_p1(62 downto 52);

    fp_input_img_V_address0_assign_proc : process(ap_CS_fsm_state1, i_cast_reg_800_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_hwmm_layer1_fu_319_input_r_address0, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fp_input_img_V_address0 <= i_cast_reg_800_pp0_iter2_reg(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fp_input_img_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fp_input_img_V_address0 <= grp_hwmm_layer1_fu_319_input_r_address0;
        else 
            fp_input_img_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    fp_input_img_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3, grp_hwmm_layer1_fu_319_input_r_ce0, ap_CS_fsm_state8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fp_input_img_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fp_input_img_V_ce0 <= grp_hwmm_layer1_fu_319_input_r_ce0;
        else 
            fp_input_img_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fp_input_img_V_ce1_assign_proc : process(grp_hwmm_layer1_fu_319_input_r_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fp_input_img_V_ce1 <= grp_hwmm_layer1_fu_319_input_r_ce1;
        else 
            fp_input_img_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fp_input_img_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, select_ln571_4_fu_633_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fp_input_img_V_d0 <= select_ln571_4_fu_633_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fp_input_img_V_d0 <= ap_const_lv32_100;
        else 
            fp_input_img_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fp_input_img_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, icmp_ln5_reg_796_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if ((((icmp_ln5_reg_796_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fp_input_img_V_we0 <= ap_const_logic_1;
        else 
            fp_input_img_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_351_p0 <= input_img_q0;

    grp_fu_880_ce_assign_proc : process(grp_hw_act_layer1_fu_304_grp_fu_880_p_ce, grp_hw_act_layer2_fu_309_grp_fu_880_p_ce, grp_hw_act_layer3_fu_314_grp_fu_880_p_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_880_ce <= grp_hw_act_layer3_fu_314_grp_fu_880_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_880_ce <= grp_hw_act_layer2_fu_309_grp_fu_880_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_880_ce <= grp_hw_act_layer1_fu_304_grp_fu_880_p_ce;
        else 
            grp_fu_880_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_880_opcode_assign_proc : process(grp_hw_act_layer1_fu_304_grp_fu_880_p_opcode, grp_hw_act_layer2_fu_309_grp_fu_880_p_opcode, grp_hw_act_layer3_fu_314_grp_fu_880_p_opcode, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_880_opcode <= grp_hw_act_layer3_fu_314_grp_fu_880_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_880_opcode <= grp_hw_act_layer2_fu_309_grp_fu_880_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_880_opcode <= grp_hw_act_layer1_fu_304_grp_fu_880_p_opcode;
        end if; 
    end process;


    grp_fu_880_p0_assign_proc : process(grp_hw_act_layer1_fu_304_grp_fu_880_p_din0, grp_hw_act_layer2_fu_309_grp_fu_880_p_din0, grp_hw_act_layer3_fu_314_grp_fu_880_p_din0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_880_p0 <= grp_hw_act_layer3_fu_314_grp_fu_880_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_880_p0 <= grp_hw_act_layer2_fu_309_grp_fu_880_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_880_p0 <= grp_hw_act_layer1_fu_304_grp_fu_880_p_din0;
        end if; 
    end process;


    grp_fu_880_p1_assign_proc : process(grp_hw_act_layer1_fu_304_grp_fu_880_p_din1, grp_hw_act_layer2_fu_309_grp_fu_880_p_din1, grp_hw_act_layer3_fu_314_grp_fu_880_p_din1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_880_p1 <= grp_hw_act_layer3_fu_314_grp_fu_880_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_880_p1 <= grp_hw_act_layer2_fu_309_grp_fu_880_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_880_p1 <= grp_hw_act_layer1_fu_304_grp_fu_880_p_din1;
        end if; 
    end process;

    grp_hw_act_layer1_fu_304_ap_start <= grp_hw_act_layer1_fu_304_ap_start_reg;
    grp_hw_act_layer1_fu_304_grp_fu_880_p_dout0 <= grp_fu_880_p2;
    grp_hw_act_layer2_fu_309_ap_start <= grp_hw_act_layer2_fu_309_ap_start_reg;
    grp_hw_act_layer2_fu_309_grp_fu_880_p_dout0 <= grp_fu_880_p2;
    grp_hw_act_layer3_fu_314_ap_start <= grp_hw_act_layer3_fu_314_ap_start_reg;
    grp_hw_act_layer3_fu_314_grp_fu_880_p_dout0 <= grp_fu_880_p2;
    grp_hwmm_layer1_fu_319_ap_start <= grp_hwmm_layer1_fu_319_ap_start_reg;
    grp_hwmm_layer2_fu_335_ap_start <= grp_hwmm_layer2_fu_335_ap_start_reg;
    grp_hwmm_layer3_fu_343_ap_start <= grp_hwmm_layer3_fu_343_ap_start_reg;
    grp_hwmm_layer4_fu_327_ap_start <= grp_hwmm_layer4_fu_327_ap_start_reg;
    i_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_257),64));
    icmp_ln138_fu_642_p2 <= "1" when (unsigned(ap_phi_mux_i_1_phi_fu_272_p4) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln1494_1_fu_704_p2 <= "1" when (signed(temp_output4_0_V_q0) > signed(max_val_V_1_fu_676_p3)) else "0";
    icmp_ln1494_fu_670_p2 <= "1" when (signed(temp_output4_0_V_q1) > signed(max_val_V_reg_292)) else "0";
    icmp_ln571_fu_410_p2 <= "1" when (trunc_ln555_fu_380_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_446_p2 <= "1" when (signed(F2_reg_838) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_473_p2 <= "1" when (F2_reg_838 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_561_p2 <= "1" when (unsigned(sh_amt_fu_461_p3) > unsigned(ap_const_lv12_35)) else "0";
    icmp_ln5_fu_360_p2 <= "1" when (i_reg_257 = ap_const_lv7_64) else "0";
    icmp_ln603_fu_492_p2 <= "1" when (tmp_fu_482_p4 = ap_const_lv7_0) else "0";
    icmp_ln851_fu_759_p2 <= "1" when (trunc_ln851_fu_755_p1 = ap_const_lv8_0) else "0";
    input_img_address0 <= i_cast_fu_366_p1(7 - 1 downto 0);

    input_img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_img_ce0 <= ap_const_logic_1;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_fu_376_p1 <= grp_fu_351_p1;
    man_V_1_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_429_p1));
    man_V_2_fu_439_p3 <= 
        man_V_1_fu_433_p2 when (p_Result_1_reg_820(0) = '1') else 
        zext_ln569_fu_429_p1;
    max_idx_V_1_fu_696_p3 <= 
        zext_ln140_fu_692_p1 when (icmp_ln1494_fu_670_p2(0) = '1') else 
        max_idx_V_reg_280;
    max_idx_V_3_fu_729_p3 <= 
        zext_ln140_1_fu_725_p1 when (icmp_ln1494_1_fu_704_p2(0) = '1') else 
        max_idx_V_1_fu_696_p3;
    max_val_V_1_fu_676_p3 <= 
        temp_output4_0_V_q1 when (icmp_ln1494_fu_670_p2(0) = '1') else 
        max_val_V_reg_292;
    max_val_V_3_fu_710_p3 <= 
        temp_output4_0_V_q0 when (icmp_ln1494_1_fu_704_p2(0) = '1') else 
        max_val_V_1_fu_676_p3;
    or_ln138_fu_659_p2 <= (ap_phi_mux_i_1_phi_fu_272_p4 or ap_const_lv4_1);
    or_ln571_1_fu_627_p2 <= (or_ln571_fu_598_p2 or and_ln581_fu_555_p2);
    or_ln571_fu_598_p2 <= (icmp_ln571_reg_830 or and_ln603_fu_585_p2);
    or_ln581_fu_573_p2 <= (or_ln582_fu_544_p2 or icmp_ln581_fu_446_p2);
    or_ln582_fu_544_p2 <= (icmp_ln582_fu_473_p2 or icmp_ln571_reg_830);
    p_Result_2_fu_422_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_825);
    p_Result_s_fu_747_p3 <= max_idx_V_reg_280(31 downto 31);
    ret_V_1_fu_765_p2 <= std_logic_vector(unsigned(ret_V_fu_737_p4) + unsigned(ap_const_lv24_1));
    ret_V_3_fu_779_p3 <= 
        select_ln850_fu_771_p3 when (p_Result_s_fu_747_p3(0) = '1') else 
        ret_V_fu_737_p4;
    ret_V_fu_737_p4 <= max_idx_V_reg_280(31 downto 8);
    select_ln571_1_fu_603_p3 <= 
        select_ln588_fu_519_p3 when (and_ln585_fu_567_p2(0) = '1') else 
        trunc_ln586_fu_508_p1;
    select_ln571_2_fu_611_p3 <= 
        trunc_ln583_fu_478_p1 when (and_ln582_fu_538_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln571_3_fu_619_p3 <= 
        select_ln571_fu_591_p3 when (or_ln571_fu_598_p2(0) = '1') else 
        select_ln571_1_fu_603_p3;
    select_ln571_4_fu_633_p3 <= 
        select_ln571_3_fu_619_p3 when (or_ln571_1_fu_627_p2(0) = '1') else 
        select_ln571_2_fu_611_p3;
    select_ln571_fu_591_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_reg_830(0) = '1') else 
        shl_ln604_fu_527_p2;
    select_ln588_fu_519_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_1_fu_512_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln850_fu_771_p3 <= 
        ret_V_fu_737_p4 when (icmp_ln851_fu_759_p2(0) = '1') else 
        ret_V_1_fu_765_p2;
        sext_ln581_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_461_p3),32));

    sh_amt_fu_461_p3 <= 
        add_ln581_fu_451_p2 when (icmp_ln581_fu_446_p2(0) = '1') else 
        sub_ln581_fu_456_p2;
    shl_ln140_1_fu_718_p3 <= (or_ln138_reg_860 & ap_const_lv8_0);
    shl_ln604_fu_527_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_478_p1),to_integer(unsigned('0' & sext_ln581_fu_469_p1(31-1 downto 0)))));
    shl_ln_fu_684_p3 <= (i_1_reg_268 & ap_const_lv8_0);
    sub_ln581_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_reg_838));

    temp_output2_0_V_address0_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_address0, grp_hwmm_layer2_fu_335_output_0_address0, grp_hwmm_layer3_fu_343_input_0_address0, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output2_0_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output2_0_V_address0 <= grp_hwmm_layer3_fu_343_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_V_address0 <= grp_hwmm_layer2_fu_335_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_address0 <= grp_hw_act_layer2_fu_309_output_0_V_address0;
        else 
            temp_output2_0_V_address0 <= "XXXXX";
        end if; 
    end process;


    temp_output2_0_V_address1_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_address1, grp_hwmm_layer3_fu_343_input_0_address1, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output2_0_V_address1 <= grp_hwmm_layer3_fu_343_input_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_address1 <= grp_hw_act_layer2_fu_309_output_0_V_address1;
        else 
            temp_output2_0_V_address1 <= "XXXXX";
        end if; 
    end process;


    temp_output2_0_V_ce0_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_ce0, grp_hwmm_layer2_fu_335_output_0_ce0, grp_hwmm_layer3_fu_343_input_0_ce0, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output2_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output2_0_V_ce0 <= grp_hwmm_layer3_fu_343_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_V_ce0 <= grp_hwmm_layer2_fu_335_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_ce0 <= grp_hw_act_layer2_fu_309_output_0_V_ce0;
        else 
            temp_output2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_ce1_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_ce1, grp_hwmm_layer3_fu_343_input_0_ce1, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output2_0_V_ce1 <= grp_hwmm_layer3_fu_343_input_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_ce1 <= grp_hw_act_layer2_fu_309_output_0_V_ce1;
        else 
            temp_output2_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_d0_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_d0, grp_hwmm_layer2_fu_335_output_0_d0, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output2_0_V_d0 <= ap_const_lv32_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_V_d0 <= grp_hwmm_layer2_fu_335_output_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_d0 <= grp_hw_act_layer2_fu_309_output_0_V_d0;
        else 
            temp_output2_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output2_0_V_we0_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_we0, grp_hwmm_layer2_fu_335_output_0_we0, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output2_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output2_0_V_we0 <= grp_hwmm_layer2_fu_335_output_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_we0 <= grp_hw_act_layer2_fu_309_output_0_V_we0;
        else 
            temp_output2_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_we1_assign_proc : process(grp_hw_act_layer2_fu_309_output_0_V_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output2_0_V_we1 <= grp_hw_act_layer2_fu_309_output_0_V_we1;
        else 
            temp_output2_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output3_0_V_address0_assign_proc : process(ap_CS_fsm_state20, grp_hw_act_layer3_fu_314_output_0_V_address0, grp_hwmm_layer4_fu_327_input_0_address0, grp_hwmm_layer3_fu_343_output_0_address0, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output3_0_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output3_0_V_address0 <= grp_hwmm_layer3_fu_343_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output3_0_V_address0 <= grp_hwmm_layer4_fu_327_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_address0 <= grp_hw_act_layer3_fu_314_output_0_V_address0;
        else 
            temp_output3_0_V_address0 <= "XXXX";
        end if; 
    end process;


    temp_output3_0_V_address1_assign_proc : process(ap_CS_fsm_state20, grp_hw_act_layer3_fu_314_output_0_V_address1, grp_hwmm_layer4_fu_327_input_0_address1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output3_0_V_address1 <= grp_hwmm_layer4_fu_327_input_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_address1 <= grp_hw_act_layer3_fu_314_output_0_V_address1;
        else 
            temp_output3_0_V_address1 <= "XXXX";
        end if; 
    end process;


    temp_output3_0_V_ce0_assign_proc : process(ap_CS_fsm_state20, grp_hw_act_layer2_fu_309_ap_done, grp_hw_act_layer3_fu_314_output_0_V_ce0, grp_hwmm_layer4_fu_327_input_0_ce0, grp_hwmm_layer3_fu_343_output_0_ce0, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((grp_hw_act_layer2_fu_309_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_output3_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output3_0_V_ce0 <= grp_hwmm_layer3_fu_343_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output3_0_V_ce0 <= grp_hwmm_layer4_fu_327_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_ce0 <= grp_hw_act_layer3_fu_314_output_0_V_ce0;
        else 
            temp_output3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output3_0_V_ce1_assign_proc : process(ap_CS_fsm_state20, grp_hw_act_layer3_fu_314_output_0_V_ce1, grp_hwmm_layer4_fu_327_input_0_ce1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output3_0_V_ce1 <= grp_hwmm_layer4_fu_327_input_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_ce1 <= grp_hw_act_layer3_fu_314_output_0_V_ce1;
        else 
            temp_output3_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output3_0_V_d0_assign_proc : process(grp_hw_act_layer3_fu_314_output_0_V_d0, grp_hwmm_layer3_fu_343_output_0_d0, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_output3_0_V_d0 <= ap_const_lv32_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output3_0_V_d0 <= grp_hwmm_layer3_fu_343_output_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_d0 <= grp_hw_act_layer3_fu_314_output_0_V_d0;
        else 
            temp_output3_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output3_0_V_we0_assign_proc : process(grp_hw_act_layer2_fu_309_ap_done, grp_hw_act_layer3_fu_314_output_0_V_we0, grp_hwmm_layer3_fu_343_output_0_we0, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((grp_hw_act_layer2_fu_309_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_output3_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_output3_0_V_we0 <= grp_hwmm_layer3_fu_343_output_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_we0 <= grp_hw_act_layer3_fu_314_output_0_V_we0;
        else 
            temp_output3_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output3_0_V_we1_assign_proc : process(grp_hw_act_layer3_fu_314_output_0_V_we1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output3_0_V_we1 <= grp_hw_act_layer3_fu_314_output_0_V_we1;
        else 
            temp_output3_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output4_0_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state20, grp_hwmm_layer4_fu_327_output_0_address0, ap_block_pp1_stage0, ap_CS_fsm_state18, zext_ln137_fu_665_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            temp_output4_0_V_address0 <= zext_ln137_fu_665_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output4_0_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output4_0_V_address0 <= grp_hwmm_layer4_fu_327_output_0_address0;
        else 
            temp_output4_0_V_address0 <= "XXXX";
        end if; 
    end process;

    temp_output4_0_V_address1 <= trunc_ln731_1_cast_fu_654_p1(4 - 1 downto 0);

    temp_output4_0_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state20, grp_hw_act_layer3_fu_314_ap_done, grp_hwmm_layer4_fu_327_output_0_ce0, ap_CS_fsm_state18)
    begin
        if ((((grp_hw_act_layer3_fu_314_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            temp_output4_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output4_0_V_ce0 <= grp_hwmm_layer4_fu_327_output_0_ce0;
        else 
            temp_output4_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output4_0_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            temp_output4_0_V_ce1 <= ap_const_logic_1;
        else 
            temp_output4_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output4_0_V_d0_assign_proc : process(ap_CS_fsm_state20, grp_hwmm_layer4_fu_327_output_0_d0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_output4_0_V_d0 <= ap_const_lv32_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output4_0_V_d0 <= grp_hwmm_layer4_fu_327_output_0_d0;
        else 
            temp_output4_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output4_0_V_we0_assign_proc : process(ap_CS_fsm_state20, grp_hw_act_layer3_fu_314_ap_done, grp_hwmm_layer4_fu_327_output_0_we0, ap_CS_fsm_state18)
    begin
        if (((grp_hw_act_layer3_fu_314_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            temp_output4_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output4_0_V_we0 <= grp_hwmm_layer4_fu_327_output_0_we0;
        else 
            temp_output4_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_address0_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_address0, grp_hwmm_layer1_fu_319_output_0_address0, grp_hwmm_layer2_fu_335_input_0_address0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output_0_V_address0 <= grp_hwmm_layer2_fu_335_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_address0 <= grp_hwmm_layer1_fu_319_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_address0 <= grp_hw_act_layer1_fu_304_output_0_V_address0;
        else 
            temp_output_0_V_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_output_0_V_address1_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_address1, grp_hwmm_layer2_fu_335_input_0_address1, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output_0_V_address1 <= grp_hwmm_layer2_fu_335_input_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_address1 <= grp_hw_act_layer1_fu_304_output_0_V_address1;
        else 
            temp_output_0_V_address1 <= "XXXXXX";
        end if; 
    end process;


    temp_output_0_V_ce0_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_ce0, grp_hwmm_layer1_fu_319_output_0_ce0, grp_hwmm_layer2_fu_335_input_0_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output_0_V_ce0 <= grp_hwmm_layer2_fu_335_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_ce0 <= grp_hwmm_layer1_fu_319_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_ce0 <= grp_hw_act_layer1_fu_304_output_0_V_ce0;
        else 
            temp_output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_ce1_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_ce1, grp_hwmm_layer2_fu_335_input_0_ce1, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_output_0_V_ce1 <= grp_hwmm_layer2_fu_335_input_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_ce1 <= grp_hw_act_layer1_fu_304_output_0_V_ce1;
        else 
            temp_output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_d0_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_d0, grp_hwmm_layer1_fu_319_output_0_d0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_d0 <= ap_const_lv32_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_d0 <= grp_hwmm_layer1_fu_319_output_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_d0 <= grp_hw_act_layer1_fu_304_output_0_V_d0;
        else 
            temp_output_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output_0_V_we0_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_we0, grp_hwmm_layer1_fu_319_output_0_we0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_we0 <= grp_hwmm_layer1_fu_319_output_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_we0 <= grp_hw_act_layer1_fu_304_output_0_V_we0;
        else 
            temp_output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_we1_assign_proc : process(grp_hw_act_layer1_fu_304_output_0_V_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_we1 <= grp_hw_act_layer1_fu_304_output_0_V_we1;
        else 
            temp_output_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_512_p3 <= input_img_load_reg_810_pp0_iter2_reg(31 downto 31);
    tmp_fu_482_p4 <= sh_amt_fu_461_p3(11 downto 5);
    trunc_ln555_fu_380_p1 <= ireg_fu_376_p1(63 - 1 downto 0);
    trunc_ln565_fu_406_p1 <= ireg_fu_376_p1(52 - 1 downto 0);
    trunc_ln583_fu_478_p1 <= man_V_2_fu_439_p3(32 - 1 downto 0);
    trunc_ln586_fu_508_p1 <= ashr_ln586_fu_502_p2(32 - 1 downto 0);
    trunc_ln731_1_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_272_p4),64));
    trunc_ln851_fu_755_p1 <= max_idx_V_reg_280(8 - 1 downto 0);
    xor_ln571_fu_533_p2 <= (icmp_ln571_reg_830 xor ap_const_lv1_1);
    xor_ln581_fu_579_p2 <= (or_ln581_fu_573_p2 xor ap_const_lv1_1);
    xor_ln582_fu_549_p2 <= (or_ln582_fu_544_p2 xor ap_const_lv1_1);
    zext_ln137_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln138_fu_659_p2),64));
    zext_ln140_1_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln140_1_fu_718_p3),32));
    zext_ln140_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_684_p3),32));
    zext_ln455_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_392_p4),12));
    zext_ln569_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_422_p3),54));
    zext_ln586_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_469_p1),54));
end behav;
