// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_hwmm_layer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state6 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state10 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state14 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [4:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [3:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_0_address0;
reg input_0_ce0;
reg[4:0] input_0_address1;
reg input_0_ce1;
reg[3:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[31:0] output_0_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] weights_layer3_weights_V_address0;
reg    weights_layer3_weights_V_ce0;
wire  signed [10:0] weights_layer3_weights_V_q0;
reg   [8:0] weights_layer3_weights_V_address1;
reg    weights_layer3_weights_V_ce1;
wire  signed [10:0] weights_layer3_weights_V_q1;
reg   [5:0] k_reg_269;
reg   [31:0] sum_V_19_reg_280;
reg   [5:0] k_4_reg_293;
reg   [31:0] sum_V_20_reg_304;
reg   [5:0] k_5_reg_317;
reg   [31:0] sum_V_21_reg_328;
reg   [5:0] k_6_reg_341;
reg   [31:0] sum_V_22_reg_352;
wire   [0:0] tmp_fu_365_p3;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln59_fu_373_p1;
reg   [63:0] zext_ln59_reg_965;
wire   [8:0] zext_ln59_1_fu_377_p1;
reg   [8:0] zext_ln59_1_reg_970;
wire   [3:0] trunc_ln59_fu_381_p1;
reg   [3:0] trunc_ln59_reg_975;
wire   [0:0] tmp_15_fu_385_p3;
reg   [0:0] tmp_15_reg_982;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_15_reg_982_pp0_iter1_reg;
wire   [5:0] add_ln63_fu_393_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] empty_35_fu_427_p1;
reg   [4:0] empty_35_reg_996;
wire   [39:0] mul_ln1192_fu_439_p2;
reg   [39:0] mul_ln1192_reg_1006;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] or_ln59_fu_534_p2;
reg   [3:0] or_ln59_reg_1026;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln63_fu_539_p1;
reg   [63:0] zext_ln63_reg_1032;
wire   [0:0] tmp_16_fu_543_p3;
reg   [0:0] tmp_16_reg_1037;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] tmp_16_reg_1037_pp1_iter1_reg;
wire   [5:0] add_ln63_1_fu_551_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] empty_37_fu_574_p1;
reg   [4:0] empty_37_reg_1051;
wire   [39:0] mul_ln1192_9_fu_586_p2;
reg   [39:0] mul_ln1192_9_reg_1061;
reg    ap_enable_reg_pp1_iter2;
wire   [3:0] or_ln59_1_fu_675_p2;
reg   [3:0] or_ln59_1_reg_1081;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln63_1_fu_680_p1;
reg   [63:0] zext_ln63_1_reg_1087;
wire   [0:0] tmp_17_fu_684_p3;
reg   [0:0] tmp_17_reg_1092;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_state13_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] tmp_17_reg_1092_pp2_iter1_reg;
wire   [5:0] add_ln63_2_fu_692_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [4:0] or_ln63_2_fu_719_p2;
reg   [4:0] or_ln63_2_reg_1111;
wire   [39:0] mul_ln1192_11_fu_733_p2;
reg   [39:0] mul_ln1192_11_reg_1117;
reg    ap_enable_reg_pp2_iter2;
wire   [3:0] or_ln59_2_fu_815_p2;
reg   [3:0] or_ln59_2_reg_1137;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln63_2_fu_820_p1;
reg   [63:0] zext_ln63_2_reg_1143;
wire   [0:0] tmp_18_fu_824_p3;
reg   [0:0] tmp_18_reg_1148;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
wire    ap_block_state17_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] tmp_18_reg_1148_pp3_iter1_reg;
wire   [5:0] add_ln63_3_fu_832_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [4:0] or_ln63_3_fu_859_p2;
reg   [4:0] or_ln63_3_reg_1167;
wire   [39:0] mul_ln1192_13_fu_873_p2;
reg   [39:0] mul_ln1192_13_reg_1173;
reg    ap_enable_reg_pp3_iter2;
wire   [4:0] add_ln59_fu_955_p2;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter1;
reg    ap_condition_pp3_exit_iter1_state16;
reg   [4:0] j_reg_257;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln1118_fu_422_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] k_cast7_fu_399_p1;
wire   [63:0] zext_ln1118_23_fu_468_p1;
wire   [63:0] zext_ln61_fu_450_p1;
wire   [63:0] zext_ln1118_17_fu_569_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] k_4_cast8_fu_557_p1;
wire   [63:0] zext_ln1118_18_fu_609_p1;
wire   [63:0] zext_ln61_1_fu_597_p1;
wire   [63:0] zext_ln1118_19_fu_710_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] k_5_cast9_fu_698_p1;
wire   [63:0] zext_ln1118_20_fu_749_p1;
wire   [63:0] zext_ln61_2_fu_739_p1;
wire   [63:0] zext_ln1118_21_fu_850_p1;
wire   [63:0] k_6_cast10_fu_838_p1;
wire   [63:0] zext_ln1118_22_fu_889_p1;
wire   [63:0] zext_ln61_3_fu_879_p1;
wire   [4:0] tmp_s_fu_404_p4;
wire   [9:0] tmp_19_fu_414_p3;
wire   [4:0] or_ln63_fu_445_p2;
wire   [8:0] tmp_20_fu_455_p3;
wire   [8:0] add_ln1118_fu_463_p2;
wire   [39:0] lhs_12_fu_473_p3;
wire   [39:0] ret_V_fu_481_p2;
wire   [31:0] tmp_21_fu_500_p4;
wire   [39:0] lhs_13_fu_510_p3;
wire   [39:0] mul_ln1192_8_fu_494_p2;
wire   [39:0] ret_V_11_fu_518_p2;
wire   [9:0] tmp_22_fu_562_p3;
wire   [4:0] or_ln63_1_fu_592_p2;
wire   [8:0] tmp_23_fu_602_p3;
wire   [39:0] lhs_15_fu_614_p3;
wire   [39:0] ret_V_12_fu_622_p2;
wire   [31:0] tmp_24_fu_641_p4;
wire   [39:0] lhs_16_fu_651_p3;
wire   [39:0] mul_ln1192_10_fu_635_p2;
wire   [39:0] ret_V_13_fu_659_p2;
wire   [9:0] tmp_25_fu_703_p3;
wire   [4:0] empty_39_fu_715_p1;
wire   [8:0] tmp_26_fu_743_p3;
wire   [39:0] lhs_18_fu_754_p3;
wire   [39:0] ret_V_14_fu_762_p2;
wire   [31:0] tmp_27_fu_781_p4;
wire   [39:0] lhs_19_fu_791_p3;
wire   [39:0] mul_ln1192_12_fu_775_p2;
wire   [39:0] ret_V_15_fu_799_p2;
wire   [9:0] tmp_28_fu_843_p3;
wire   [4:0] empty_41_fu_855_p1;
wire   [8:0] tmp_29_fu_883_p3;
wire   [39:0] lhs_21_fu_894_p3;
wire   [39:0] ret_V_16_fu_902_p2;
wire   [31:0] tmp_30_fu_921_p4;
wire   [39:0] lhs_22_fu_931_p3;
wire   [39:0] mul_ln1192_14_fu_915_p2;
wire   [39:0] ret_V_17_fu_939_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

nn_inference_hwmm_layer3_weights_layer3_weights_V #(
    .DataWidth( 11 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
weights_layer3_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer3_weights_V_address0),
    .ce0(weights_layer3_weights_V_ce0),
    .q0(weights_layer3_weights_V_q0),
    .address1(weights_layer3_weights_V_address1),
    .ce1(weights_layer3_weights_V_ce1),
    .q1(weights_layer3_weights_V_q1)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U30(
    .din0(weights_layer3_weights_V_q1),
    .din1(input_0_q1),
    .dout(mul_ln1192_fu_439_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U31(
    .din0(weights_layer3_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_8_fu_494_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U32(
    .din0(weights_layer3_weights_V_q1),
    .din1(input_0_q1),
    .dout(mul_ln1192_9_fu_586_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U33(
    .din0(weights_layer3_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_10_fu_635_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U34(
    .din0(weights_layer3_weights_V_q1),
    .din1(input_0_q1),
    .dout(mul_ln1192_11_fu_733_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U35(
    .din0(weights_layer3_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_12_fu_775_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U36(
    .din0(weights_layer3_weights_V_q1),
    .din1(input_0_q1),
    .dout(mul_ln1192_13_fu_873_p2)
);

nn_inference_mul_11s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_11s_32s_40_1_1_U37(
    .din0(weights_layer3_weights_V_q0),
    .din1(input_0_q0),
    .dout(mul_ln1192_14_fu_915_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_365_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((tmp_fu_365_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_257 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_reg_257 <= add_ln59_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_4_reg_293 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_16_fu_543_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_4_reg_293 <= add_ln63_1_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_5_reg_317 <= 6'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_17_fu_684_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        k_5_reg_317 <= add_ln63_2_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_6_reg_341 <= 6'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (tmp_18_fu_824_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        k_6_reg_341 <= add_ln63_3_fu_832_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_365_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_269 <= 6'd0;
    end else if (((tmp_15_fu_385_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_269 <= add_ln63_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_365_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_V_19_reg_280 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_15_reg_982_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_19_reg_280 <= {{ret_V_11_fu_518_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_V_20_reg_304 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_16_reg_1037_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_20_reg_304 <= {{ret_V_13_fu_659_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_21_reg_328 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (tmp_17_reg_1092_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sum_V_21_reg_328 <= {{ret_V_15_fu_799_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_V_22_reg_352 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (tmp_18_reg_1148_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sum_V_22_reg_352 <= {{ret_V_17_fu_939_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_385_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_35_reg_996 <= empty_35_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_fu_543_p3 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_37_reg_1051 <= empty_37_fu_574_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_reg_1092 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        mul_ln1192_11_reg_1117 <= mul_ln1192_11_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_1148 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mul_ln1192_13_reg_1173 <= mul_ln1192_13_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1037 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_ln1192_9_reg_1061 <= mul_ln1192_9_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_reg_982 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1192_reg_1006 <= mul_ln1192_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        or_ln59_1_reg_1081[0] <= or_ln59_1_fu_675_p2[0];
or_ln59_1_reg_1081[3 : 2] <= or_ln59_1_fu_675_p2[3 : 2];
        zext_ln63_1_reg_1087[0] <= zext_ln63_1_fu_680_p1[0];
zext_ln63_1_reg_1087[3 : 2] <= zext_ln63_1_fu_680_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        or_ln59_2_reg_1137[3 : 2] <= or_ln59_2_fu_815_p2[3 : 2];
        zext_ln63_2_reg_1143[3 : 2] <= zext_ln63_2_fu_820_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_ln59_reg_1026[3 : 1] <= or_ln59_fu_534_p2[3 : 1];
        zext_ln63_reg_1032[3 : 1] <= zext_ln63_fu_539_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_684_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        or_ln63_2_reg_1111[4 : 1] <= or_ln63_2_fu_719_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_fu_824_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        or_ln63_3_reg_1167[4 : 1] <= or_ln63_3_fu_859_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_15_reg_982 <= k_reg_269[32'd5];
        tmp_15_reg_982_pp0_iter1_reg <= tmp_15_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_16_reg_1037 <= k_4_reg_293[32'd5];
        tmp_16_reg_1037_pp1_iter1_reg <= tmp_16_reg_1037;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_17_reg_1092 <= k_5_reg_317[32'd5];
        tmp_17_reg_1092_pp2_iter1_reg <= tmp_17_reg_1092;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        tmp_18_reg_1148 <= k_6_reg_341[32'd5];
        tmp_18_reg_1148_pp3_iter1_reg <= tmp_18_reg_1148;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_365_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln59_reg_975 <= trunc_ln59_fu_381_p1;
        zext_ln59_1_reg_970[4 : 0] <= zext_ln59_1_fu_377_p1[4 : 0];
        zext_ln59_reg_965[4 : 0] <= zext_ln59_fu_373_p1[4 : 0];
    end
end

always @ (*) begin
    if ((tmp_15_fu_385_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_16_fu_543_p3 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_17_fu_684_p3 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_condition_pp3_exit_iter1_state16 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_18_fu_824_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_365_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_365_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        input_0_address0 = zext_ln61_3_fu_879_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        input_0_address0 = zext_ln61_2_fu_739_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        input_0_address0 = zext_ln61_1_fu_597_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_0_address0 = zext_ln61_fu_450_p1;
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        input_0_address1 = k_6_cast10_fu_838_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        input_0_address1 = k_5_cast9_fu_698_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        input_0_address1 = k_4_cast8_fu_557_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        input_0_address1 = k_cast7_fu_399_p1;
    end else begin
        input_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_address0 = zext_ln63_2_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_address0 = zext_ln63_1_reg_1087;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_address0 = zext_ln63_reg_1032;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_address0 = zext_ln59_reg_965;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_d0 = sum_V_22_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_d0 = sum_V_21_reg_328;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_d0 = sum_V_20_reg_304;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_d0 = sum_V_19_reg_280;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        weights_layer3_weights_V_address0 = zext_ln1118_22_fu_889_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        weights_layer3_weights_V_address0 = zext_ln1118_20_fu_749_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        weights_layer3_weights_V_address0 = zext_ln1118_18_fu_609_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_layer3_weights_V_address0 = zext_ln1118_23_fu_468_p1;
    end else begin
        weights_layer3_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        weights_layer3_weights_V_address1 = zext_ln1118_21_fu_850_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        weights_layer3_weights_V_address1 = zext_ln1118_19_fu_710_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weights_layer3_weights_V_address1 = zext_ln1118_17_fu_569_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_layer3_weights_V_address1 = zext_ln1118_fu_422_p1;
    end else begin
        weights_layer3_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        weights_layer3_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer3_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        weights_layer3_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer3_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_365_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_15_fu_385_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((tmp_15_fu_385_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_16_fu_543_p3 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_16_fu_543_p3 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_17_fu_684_p3 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_17_fu_684_p3 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_fu_463_p2 = (tmp_20_fu_455_p3 + zext_ln59_1_reg_970);

assign add_ln59_fu_955_p2 = (j_reg_257 + 5'd4);

assign add_ln63_1_fu_551_p2 = (k_4_reg_293 + 6'd2);

assign add_ln63_2_fu_692_p2 = (k_5_reg_317 + 6'd2);

assign add_ln63_3_fu_832_p2 = (k_6_reg_341 + 6'd2);

assign add_ln63_fu_393_p2 = (k_reg_269 + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign empty_35_fu_427_p1 = k_reg_269[4:0];

assign empty_37_fu_574_p1 = k_4_reg_293[4:0];

assign empty_39_fu_715_p1 = k_5_reg_317[4:0];

assign empty_41_fu_855_p1 = k_6_reg_341[4:0];

assign k_4_cast8_fu_557_p1 = k_4_reg_293;

assign k_5_cast9_fu_698_p1 = k_5_reg_317;

assign k_6_cast10_fu_838_p1 = k_6_reg_341;

assign k_cast7_fu_399_p1 = k_reg_269;

assign lhs_12_fu_473_p3 = {{sum_V_19_reg_280}, {8'd0}};

assign lhs_13_fu_510_p3 = {{tmp_21_fu_500_p4}, {8'd0}};

assign lhs_15_fu_614_p3 = {{sum_V_20_reg_304}, {8'd0}};

assign lhs_16_fu_651_p3 = {{tmp_24_fu_641_p4}, {8'd0}};

assign lhs_18_fu_754_p3 = {{sum_V_21_reg_328}, {8'd0}};

assign lhs_19_fu_791_p3 = {{tmp_27_fu_781_p4}, {8'd0}};

assign lhs_21_fu_894_p3 = {{sum_V_22_reg_352}, {8'd0}};

assign lhs_22_fu_931_p3 = {{tmp_30_fu_921_p4}, {8'd0}};

assign or_ln59_1_fu_675_p2 = (trunc_ln59_reg_975 | 4'd2);

assign or_ln59_2_fu_815_p2 = (trunc_ln59_reg_975 | 4'd3);

assign or_ln59_fu_534_p2 = (trunc_ln59_reg_975 | 4'd1);

assign or_ln63_1_fu_592_p2 = (empty_37_reg_1051 | 5'd1);

assign or_ln63_2_fu_719_p2 = (empty_39_fu_715_p1 | 5'd1);

assign or_ln63_3_fu_859_p2 = (empty_41_fu_855_p1 | 5'd1);

assign or_ln63_fu_445_p2 = (empty_35_reg_996 | 5'd1);

assign ret_V_11_fu_518_p2 = (lhs_13_fu_510_p3 + mul_ln1192_8_fu_494_p2);

assign ret_V_12_fu_622_p2 = (lhs_15_fu_614_p3 + mul_ln1192_9_reg_1061);

assign ret_V_13_fu_659_p2 = (lhs_16_fu_651_p3 + mul_ln1192_10_fu_635_p2);

assign ret_V_14_fu_762_p2 = (lhs_18_fu_754_p3 + mul_ln1192_11_reg_1117);

assign ret_V_15_fu_799_p2 = (lhs_19_fu_791_p3 + mul_ln1192_12_fu_775_p2);

assign ret_V_16_fu_902_p2 = (lhs_21_fu_894_p3 + mul_ln1192_13_reg_1173);

assign ret_V_17_fu_939_p2 = (lhs_22_fu_931_p3 + mul_ln1192_14_fu_915_p2);

assign ret_V_fu_481_p2 = (lhs_12_fu_473_p3 + mul_ln1192_reg_1006);

assign tmp_15_fu_385_p3 = k_reg_269[32'd5];

assign tmp_16_fu_543_p3 = k_4_reg_293[32'd5];

assign tmp_17_fu_684_p3 = k_5_reg_317[32'd5];

assign tmp_18_fu_824_p3 = k_6_reg_341[32'd5];

assign tmp_19_fu_414_p3 = {{tmp_s_fu_404_p4}, {j_reg_257}};

assign tmp_20_fu_455_p3 = {{or_ln63_fu_445_p2}, {4'd0}};

assign tmp_21_fu_500_p4 = {{ret_V_fu_481_p2[39:8]}};

assign tmp_22_fu_562_p3 = {{k_4_reg_293}, {or_ln59_reg_1026}};

assign tmp_23_fu_602_p3 = {{or_ln63_1_fu_592_p2}, {or_ln59_reg_1026}};

assign tmp_24_fu_641_p4 = {{ret_V_12_fu_622_p2[39:8]}};

assign tmp_25_fu_703_p3 = {{k_5_reg_317}, {or_ln59_1_reg_1081}};

assign tmp_26_fu_743_p3 = {{or_ln63_2_reg_1111}, {or_ln59_1_reg_1081}};

assign tmp_27_fu_781_p4 = {{ret_V_14_fu_762_p2[39:8]}};

assign tmp_28_fu_843_p3 = {{k_6_reg_341}, {or_ln59_2_reg_1137}};

assign tmp_29_fu_883_p3 = {{or_ln63_3_reg_1167}, {or_ln59_2_reg_1137}};

assign tmp_30_fu_921_p4 = {{ret_V_16_fu_902_p2[39:8]}};

assign tmp_fu_365_p3 = j_reg_257[32'd4];

assign tmp_s_fu_404_p4 = {{k_reg_269[5:1]}};

assign trunc_ln59_fu_381_p1 = j_reg_257[3:0];

assign zext_ln1118_17_fu_569_p1 = tmp_22_fu_562_p3;

assign zext_ln1118_18_fu_609_p1 = tmp_23_fu_602_p3;

assign zext_ln1118_19_fu_710_p1 = tmp_25_fu_703_p3;

assign zext_ln1118_20_fu_749_p1 = tmp_26_fu_743_p3;

assign zext_ln1118_21_fu_850_p1 = tmp_28_fu_843_p3;

assign zext_ln1118_22_fu_889_p1 = tmp_29_fu_883_p3;

assign zext_ln1118_23_fu_468_p1 = add_ln1118_fu_463_p2;

assign zext_ln1118_fu_422_p1 = tmp_19_fu_414_p3;

assign zext_ln59_1_fu_377_p1 = j_reg_257;

assign zext_ln59_fu_373_p1 = j_reg_257;

assign zext_ln61_1_fu_597_p1 = or_ln63_1_fu_592_p2;

assign zext_ln61_2_fu_739_p1 = or_ln63_2_reg_1111;

assign zext_ln61_3_fu_879_p1 = or_ln63_3_reg_1167;

assign zext_ln61_fu_450_p1 = or_ln63_fu_445_p2;

assign zext_ln63_1_fu_680_p1 = or_ln59_1_fu_675_p2;

assign zext_ln63_2_fu_820_p1 = or_ln59_2_fu_815_p2;

assign zext_ln63_fu_539_p1 = or_ln59_fu_534_p2;

always @ (posedge ap_clk) begin
    zext_ln59_reg_965[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln59_1_reg_970[8:5] <= 4'b0000;
    or_ln59_reg_1026[0] <= 1'b1;
    zext_ln63_reg_1032[0] <= 1'b1;
    zext_ln63_reg_1032[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    or_ln59_1_reg_1081[1] <= 1'b1;
    zext_ln63_1_reg_1087[1] <= 1'b1;
    zext_ln63_1_reg_1087[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    or_ln63_2_reg_1111[0] <= 1'b1;
    or_ln59_2_reg_1137[1:0] <= 2'b11;
    zext_ln63_2_reg_1143[1:0] <= 2'b11;
    zext_ln63_2_reg_1143[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    or_ln63_3_reg_1167[0] <= 1'b1;
end

endmodule //nn_inference_hwmm_layer3
