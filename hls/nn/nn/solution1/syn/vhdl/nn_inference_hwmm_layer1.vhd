-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference_hwmm_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference_hwmm_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_layer1_weights_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_layer1_weights_V_ce0 : STD_LOGIC;
    signal weights_layer1_weights_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_layer1_weights_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_layer1_weights_V_ce1 : STD_LOGIC;
    signal weights_layer1_weights_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_263 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_41_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_10_reg_287 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_42_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_11_reg_311 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_43_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_12_reg_335 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_44_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln21_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_933 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_371_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln21_1_reg_938 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln21_fu_375_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln21_reg_943 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln25_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln25_reg_950_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_385_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal or_ln25_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_reg_969 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_fu_433_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_reg_975 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal or_ln21_fu_521_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln21_reg_995 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln25_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_reg_1001 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln25_1_reg_1006_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_1_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal or_ln25_1_fu_559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_1_reg_1025 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_23_fu_573_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_23_reg_1031 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal or_ln21_1_fu_655_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln21_1_reg_1051 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln25_1_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_reg_1057 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_2_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_2_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln25_2_reg_1062_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_2_fu_670_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal or_ln25_2_fu_693_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_2_reg_1081 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_25_fu_707_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_25_reg_1087 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal or_ln21_2_fu_789_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln21_2_reg_1107 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln25_2_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_2_reg_1113 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_3_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_3_reg_1118 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state15_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln25_3_reg_1118_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_3_fu_804_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal or_ln25_3_fu_827_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_3_reg_1137 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1192_27_fu_841_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_27_reg_1143 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal add_ln21_fu_923_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp3_exit_iter1_state16 : STD_LOGIC;
    signal j_reg_251 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln1118_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_cast3_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_37_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_31_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal k_10_cast4_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_32_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_33_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal k_11_cast5_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_34_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_35_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_12_cast6_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_36_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_396_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_406_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_44_fu_443_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1118_fu_450_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_34_fu_460_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_fu_468_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_45_fu_487_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_35_fu_497_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_22_fu_481_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_25_fu_505_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_46_fu_547_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_47_fu_583_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_37_fu_594_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_26_fu_602_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_48_fu_621_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_38_fu_631_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_24_fu_615_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_27_fu_639_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_49_fu_681_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_fu_717_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_40_fu_728_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_28_fu_736_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_51_fu_755_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_41_fu_765_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_26_fu_749_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_29_fu_773_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_52_fu_815_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_53_fu_851_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_43_fu_862_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_30_fu_870_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_54_fu_889_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_44_fu_899_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_28_fu_883_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_31_fu_907_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_mul_10s_32s_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component nn_inference_hwmm_layer1_weights_layer1_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    weights_layer1_weights_V_U : component nn_inference_hwmm_layer1_weights_layer1_weights_V
    generic map (
        DataWidth => 10,
        AddressRange => 6400,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer1_weights_V_address0,
        ce0 => weights_layer1_weights_V_ce0,
        q0 => weights_layer1_weights_V_q0,
        address1 => weights_layer1_weights_V_address1,
        ce1 => weights_layer1_weights_V_ce1,
        q1 => weights_layer1_weights_V_q1);

    mul_10s_32s_40_1_1_U1 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => mul_ln1192_fu_433_p2);

    mul_10s_32s_40_1_1_U2 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => mul_ln1192_22_fu_481_p2);

    mul_10s_32s_40_1_1_U3 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => mul_ln1192_23_fu_573_p2);

    mul_10s_32s_40_1_1_U4 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => mul_ln1192_24_fu_615_p2);

    mul_10s_32s_40_1_1_U5 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => mul_ln1192_25_fu_707_p2);

    mul_10s_32s_40_1_1_U6 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => mul_ln1192_26_fu_749_p2);

    mul_10s_32s_40_1_1_U7 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => mul_ln1192_27_fu_841_p2);

    mul_10s_32s_40_1_1_U8 : component nn_inference_mul_10s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => mul_ln1192_28_fu_883_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_251 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_251 <= add_ln21_fu_923_p2;
            end if; 
        end if;
    end process;

    k_10_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_10_reg_287 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_1_fu_530_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k_10_reg_287 <= add_ln25_1_fu_536_p2;
            end if; 
        end if;
    end process;

    k_11_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_11_reg_311 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln25_2_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                k_11_reg_311 <= add_ln25_2_fu_670_p2;
            end if; 
        end if;
    end process;

    k_12_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_12_reg_335 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln25_3_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                k_12_reg_335 <= add_ln25_3_fu_804_p2;
            end if; 
        end if;
    end process;

    k_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_263 <= ap_const_lv7_0;
            elsif (((icmp_ln25_fu_379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_263 <= add_ln25_fu_385_p2;
            end if; 
        end if;
    end process;

    sum_V_41_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_V_41_reg_274 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln25_reg_950_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_V_41_reg_274 <= ret_V_25_fu_505_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_42_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_V_42_reg_298 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln25_1_reg_1006_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sum_V_42_reg_298 <= ret_V_27_fu_639_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_43_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_43_reg_322 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln25_2_reg_1062_pp2_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                sum_V_43_reg_322 <= ret_V_29_fu_773_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_44_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_V_44_reg_346 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln25_3_reg_1118_pp3_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                sum_V_44_reg_346 <= ret_V_31_fu_907_p2(39 downto 8);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln25_1_reg_1006 <= icmp_ln25_1_fu_530_p2;
                icmp_ln25_1_reg_1006_pp1_iter1_reg <= icmp_ln25_1_reg_1006;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln25_2_reg_1062 <= icmp_ln25_2_fu_664_p2;
                icmp_ln25_2_reg_1062_pp2_iter1_reg <= icmp_ln25_2_reg_1062;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln25_3_reg_1118 <= icmp_ln25_3_fu_798_p2;
                icmp_ln25_3_reg_1118_pp3_iter1_reg <= icmp_ln25_3_reg_1118;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_950 <= icmp_ln25_fu_379_p2;
                icmp_ln25_reg_950_pp0_iter1_reg <= icmp_ln25_reg_950;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_1_reg_1006 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_ln1192_23_reg_1031 <= mul_ln1192_23_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_2_reg_1062 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                mul_ln1192_25_reg_1087 <= mul_ln1192_25_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_3_reg_1118 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                mul_ln1192_27_reg_1143 <= mul_ln1192_27_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_950 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1192_reg_975 <= mul_ln1192_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    or_ln21_1_reg_1051(0) <= or_ln21_1_fu_655_p2(0);    or_ln21_1_reg_1051(5 downto 2) <= or_ln21_1_fu_655_p2(5 downto 2);
                    zext_ln25_1_reg_1057(0) <= zext_ln25_1_fu_660_p1(0);    zext_ln25_1_reg_1057(5 downto 2) <= zext_ln25_1_fu_660_p1(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    or_ln21_2_reg_1107(5 downto 2) <= or_ln21_2_fu_789_p2(5 downto 2);
                    zext_ln25_2_reg_1113(5 downto 2) <= zext_ln25_2_fu_794_p1(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    or_ln21_reg_995(5 downto 1) <= or_ln21_fu_521_p2(5 downto 1);
                    zext_ln25_reg_1001(5 downto 1) <= zext_ln25_fu_526_p1(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_1_fu_530_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    or_ln25_1_reg_1025(6 downto 1) <= or_ln25_1_fu_559_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_2_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    or_ln25_2_reg_1081(6 downto 1) <= or_ln25_2_fu_693_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_3_fu_798_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    or_ln25_3_reg_1137(6 downto 1) <= or_ln25_3_fu_827_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    or_ln25_reg_969(6 downto 1) <= or_ln25_fu_419_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln21_reg_943 <= trunc_ln21_fu_375_p1;
                    zext_ln21_1_reg_938(6 downto 0) <= zext_ln21_1_fu_371_p1(6 downto 0);
                    zext_ln21_reg_933(6 downto 0) <= zext_ln21_fu_367_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln21_reg_933(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln21_1_reg_938(12 downto 7) <= "000000";
    or_ln25_reg_969(0) <= '1';
    or_ln21_reg_995(0) <= '1';
    zext_ln25_reg_1001(0) <= '1';
    zext_ln25_reg_1001(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    or_ln25_1_reg_1025(0) <= '1';
    or_ln21_1_reg_1051(1) <= '1';
    zext_ln25_1_reg_1057(1) <= '1';
    zext_ln25_1_reg_1057(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    or_ln25_2_reg_1081(0) <= '1';
    or_ln21_2_reg_1107(1 downto 0) <= "11";
    zext_ln25_2_reg_1113(1 downto 0) <= "11";
    zext_ln25_2_reg_1113(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    or_ln25_3_reg_1137(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_359_p3, ap_CS_fsm_state2, icmp_ln25_fu_379_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln25_1_fu_530_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, icmp_ln25_2_fu_664_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln25_fu_379_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln25_fu_379_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_1_fu_530_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_1_fu_530_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln25_2_fu_664_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln25_2_fu_664_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1118_fu_450_p2 <= std_logic_vector(unsigned(tmp_44_fu_443_p3) + unsigned(zext_ln21_1_reg_938));
    add_ln21_fu_923_p2 <= std_logic_vector(unsigned(j_reg_251) + unsigned(ap_const_lv7_4));
    add_ln25_1_fu_536_p2 <= std_logic_vector(unsigned(k_10_reg_287) + unsigned(ap_const_lv7_2));
    add_ln25_2_fu_670_p2 <= std_logic_vector(unsigned(k_11_reg_311) + unsigned(ap_const_lv7_2));
    add_ln25_3_fu_804_p2 <= std_logic_vector(unsigned(k_12_reg_335) + unsigned(ap_const_lv7_2));
    add_ln25_fu_385_p2 <= std_logic_vector(unsigned(k_reg_263) + unsigned(ap_const_lv7_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln25_fu_379_p2)
    begin
        if ((icmp_ln25_fu_379_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln25_1_fu_530_p2)
    begin
        if ((icmp_ln25_1_fu_530_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln25_2_fu_664_p2)
    begin
        if ((icmp_ln25_2_fu_664_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state16_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(icmp_ln25_3_fu_798_p2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_subdone)
    begin
        if (((icmp_ln25_3_fu_798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_359_p3, ap_CS_fsm_state2)
    begin
        if ((((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_fu_359_p3, ap_CS_fsm_state2)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_1_fu_530_p2 <= "1" when (unsigned(k_10_reg_287) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln25_2_fu_664_p2 <= "1" when (unsigned(k_11_reg_311) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln25_3_fu_798_p2 <= "1" when (unsigned(k_12_reg_335) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln25_fu_379_p2 <= "1" when (unsigned(k_reg_263) < unsigned(ap_const_lv7_64)) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln23_fu_439_p1, ap_block_pp1_stage0, zext_ln23_1_fu_579_p1, ap_block_pp2_stage0, zext_ln23_2_fu_713_p1, zext_ln23_3_fu_847_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            input_r_address0 <= zext_ln23_3_fu_847_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            input_r_address0 <= zext_ln23_2_fu_713_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            input_r_address0 <= zext_ln23_1_fu_579_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_r_address0 <= zext_ln23_fu_439_p1(7 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_block_pp0_stage0, k_cast3_fu_391_p1, ap_block_pp1_stage0, k_10_cast4_fu_542_p1, ap_block_pp2_stage0, k_11_cast5_fu_676_p1, k_12_cast6_fu_810_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            input_r_address1 <= k_12_cast6_fu_810_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            input_r_address1 <= k_11_cast5_fu_676_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            input_r_address1 <= k_10_cast4_fu_542_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_r_address1 <= k_cast3_fu_391_p1(7 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    k_10_cast4_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_10_reg_287),64));
    k_11_cast5_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_11_reg_311),64));
    k_12_cast6_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_12_reg_335),64));
    k_cast3_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_263),64));
    lhs_34_fu_460_p3 <= (sum_V_41_reg_274 & ap_const_lv8_0);
    lhs_35_fu_497_p3 <= (tmp_45_fu_487_p4 & ap_const_lv8_0);
    lhs_37_fu_594_p3 <= (sum_V_42_reg_298 & ap_const_lv8_0);
    lhs_38_fu_631_p3 <= (tmp_48_fu_621_p4 & ap_const_lv8_0);
    lhs_40_fu_728_p3 <= (sum_V_43_reg_322 & ap_const_lv8_0);
    lhs_41_fu_765_p3 <= (tmp_51_fu_755_p4 & ap_const_lv8_0);
    lhs_43_fu_862_p3 <= (sum_V_44_reg_346 & ap_const_lv8_0);
    lhs_44_fu_899_p3 <= (tmp_54_fu_889_p4 & ap_const_lv8_0);
    or_ln21_1_fu_655_p2 <= (trunc_ln21_reg_943 or ap_const_lv6_2);
    or_ln21_2_fu_789_p2 <= (trunc_ln21_reg_943 or ap_const_lv6_3);
    or_ln21_fu_521_p2 <= (trunc_ln21_reg_943 or ap_const_lv6_1);
    or_ln25_1_fu_559_p2 <= (k_10_reg_287 or ap_const_lv7_1);
    or_ln25_2_fu_693_p2 <= (k_11_reg_311 or ap_const_lv7_1);
    or_ln25_3_fu_827_p2 <= (k_12_reg_335 or ap_const_lv7_1);
    or_ln25_fu_419_p2 <= (k_reg_263 or ap_const_lv7_1);

    output_0_address0_assign_proc : process(zext_ln21_reg_933, ap_CS_fsm_state6, zext_ln25_reg_1001, ap_CS_fsm_state10, zext_ln25_1_reg_1057, ap_CS_fsm_state14, zext_ln25_2_reg_1113, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_address0 <= zext_ln25_2_reg_1113(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_address0 <= zext_ln25_1_reg_1057(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_address0 <= zext_ln25_reg_1001(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_address0 <= zext_ln21_reg_933(6 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(sum_V_41_reg_274, sum_V_42_reg_298, sum_V_43_reg_322, sum_V_44_reg_346, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_d0 <= sum_V_44_reg_346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_d0 <= sum_V_43_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_d0 <= sum_V_42_reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_d0 <= sum_V_41_reg_274;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_25_fu_505_p2 <= std_logic_vector(unsigned(lhs_35_fu_497_p3) + unsigned(mul_ln1192_22_fu_481_p2));
    ret_V_26_fu_602_p2 <= std_logic_vector(unsigned(lhs_37_fu_594_p3) + unsigned(mul_ln1192_23_reg_1031));
    ret_V_27_fu_639_p2 <= std_logic_vector(unsigned(lhs_38_fu_631_p3) + unsigned(mul_ln1192_24_fu_615_p2));
    ret_V_28_fu_736_p2 <= std_logic_vector(unsigned(lhs_40_fu_728_p3) + unsigned(mul_ln1192_25_reg_1087));
    ret_V_29_fu_773_p2 <= std_logic_vector(unsigned(lhs_41_fu_765_p3) + unsigned(mul_ln1192_26_fu_749_p2));
    ret_V_30_fu_870_p2 <= std_logic_vector(unsigned(lhs_43_fu_862_p3) + unsigned(mul_ln1192_27_reg_1143));
    ret_V_31_fu_907_p2 <= std_logic_vector(unsigned(lhs_44_fu_899_p3) + unsigned(mul_ln1192_28_fu_883_p2));
    ret_V_fu_468_p2 <= std_logic_vector(unsigned(lhs_34_fu_460_p3) + unsigned(mul_ln1192_reg_975));
    tmp_43_fu_406_p3 <= (tmp_s_fu_396_p4 & j_reg_251);
    tmp_44_fu_443_p3 <= (or_ln25_reg_969 & ap_const_lv6_0);
    tmp_45_fu_487_p4 <= ret_V_fu_468_p2(39 downto 8);
    tmp_46_fu_547_p3 <= (k_10_reg_287 & or_ln21_reg_995);
    tmp_47_fu_583_p3 <= (or_ln25_1_reg_1025 & or_ln21_reg_995);
    tmp_48_fu_621_p4 <= ret_V_26_fu_602_p2(39 downto 8);
    tmp_49_fu_681_p3 <= (k_11_reg_311 & or_ln21_1_reg_1051);
    tmp_50_fu_717_p3 <= (or_ln25_2_reg_1081 & or_ln21_1_reg_1051);
    tmp_51_fu_755_p4 <= ret_V_28_fu_736_p2(39 downto 8);
    tmp_52_fu_815_p3 <= (k_12_reg_335 & or_ln21_2_reg_1107);
    tmp_53_fu_851_p3 <= (or_ln25_3_reg_1137 & or_ln21_2_reg_1107);
    tmp_54_fu_889_p4 <= ret_V_30_fu_870_p2(39 downto 8);
    tmp_fu_359_p3 <= j_reg_251(6 downto 6);
    tmp_s_fu_396_p4 <= k_reg_263(6 downto 1);
    trunc_ln21_fu_375_p1 <= j_reg_251(6 - 1 downto 0);

    weights_layer1_weights_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln1118_37_fu_455_p1, ap_block_pp1_stage0, zext_ln1118_32_fu_589_p1, ap_block_pp2_stage0, zext_ln1118_34_fu_723_p1, zext_ln1118_36_fu_857_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_36_fu_857_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_34_fu_723_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_32_fu_589_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_37_fu_455_p1(13 - 1 downto 0);
        else 
            weights_layer1_weights_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_layer1_weights_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln1118_fu_414_p1, ap_block_pp0_stage0, zext_ln1118_31_fu_554_p1, ap_block_pp1_stage0, zext_ln1118_33_fu_688_p1, ap_block_pp2_stage0, zext_ln1118_35_fu_822_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_35_fu_822_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_33_fu_688_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_31_fu_554_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_fu_414_p1(13 - 1 downto 0);
        else 
            weights_layer1_weights_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            weights_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer1_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            weights_layer1_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer1_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_31_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_547_p3),64));
    zext_ln1118_32_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_583_p3),64));
    zext_ln1118_33_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_681_p3),64));
    zext_ln1118_34_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_717_p3),64));
    zext_ln1118_35_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_815_p3),64));
    zext_ln1118_36_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_851_p3),64));
    zext_ln1118_37_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_fu_450_p2),64));
    zext_ln1118_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_406_p3),64));
    zext_ln21_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_251),13));
    zext_ln21_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_251),64));
    zext_ln23_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_1_reg_1025),64));
    zext_ln23_2_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_2_reg_1081),64));
    zext_ln23_3_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_3_reg_1137),64));
    zext_ln23_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_reg_969),64));
    zext_ln25_1_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_1_fu_655_p2),64));
    zext_ln25_2_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_2_fu_789_p2),64));
    zext_ln25_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_fu_521_p2),64));
end behav;
