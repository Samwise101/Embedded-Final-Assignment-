-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference_hw_act_layer3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_0_V_ce1 : OUT STD_LOGIC;
    output_0_V_we1 : OUT STD_LOGIC;
    output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_880_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_880_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_880_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_880_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_880_p_ce : OUT STD_LOGIC );
end;


architecture behav of nn_inference_hw_act_layer3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_18 : STD_LOGIC_VECTOR (10 downto 0) := "00000011000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_107 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_23_reg_818_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_818_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_V_addr_reg_822 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_822_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_1_reg_827 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_1_reg_827_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_1_reg_827_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln121_fu_152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_reg_832 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Val2_s_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln909_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln909_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln908_fu_324_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln908_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_873 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_4_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_878_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_1_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_1_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_1_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln908_2_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln908_2_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_1_fu_498_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_1_reg_910 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln734_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1506_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_1_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_723_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_16_reg_930 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1506_2_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_2_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_3_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1506_3_reg_940 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln734_1_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1506_1_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1506_1_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_111_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_cast29_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln885_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_54_fu_137_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln121_fu_141_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_fu_180_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_210_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_226_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_fu_230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln897_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln899_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln899_2_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln899_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln896_fu_298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_fu_358_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_368_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_388_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_1_fu_404_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_1_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_1_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln897_1_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln899_1_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln899_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln899_2_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_1_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln896_1_fu_476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_3_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln909_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln908_fu_508_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln909_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_523_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_533_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_539_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_569_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln893_fu_561_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_574_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_580_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_12_fu_587_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_604_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln908_1_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln907_1_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln909_1_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln909_1_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln908_1_fu_638_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln909_1_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_4_fu_659_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_1_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_669_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_675_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_7_fu_689_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_1_fu_705_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln893_1_fu_697_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_1_fu_710_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_1_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_716_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1506_1_fu_735_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1506_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1506_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1506_1_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1506_1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_1_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1506_2_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1506_3_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_119_ce : STD_LOGIC;
    signal grp_fu_119_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_107 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_23_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_107 <= add_ln121_reg_832;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_23_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln121_reg_832 <= add_ln121_fu_152_p2;
                p_Val2_4_reg_878 <= output_0_V_q0;
                p_Val2_s_reg_837 <= output_0_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_23_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln908_reg_858 <= add_ln908_fu_306_p2;
                icmp_ln908_1_reg_900 <= icmp_ln908_1_fu_470_p2;
                icmp_ln908_reg_853 <= icmp_ln908_fu_292_p2;
                p_Result_13_reg_884 <= output_0_V_q0(31 downto 31);
                p_Result_9_reg_843 <= output_0_V_q1(31 downto 31);
                select_ln908_2_reg_905 <= select_ln908_2_fu_490_p3;
                select_ln908_reg_868 <= select_ln908_fu_324_p3;
                sub_ln894_1_reg_894 <= sub_ln894_1_fu_376_p2;
                sub_ln909_reg_863 <= sub_ln909_fu_318_p2;
                tmp_V_4_reg_848 <= tmp_V_4_fu_172_p3;
                tmp_V_5_reg_889 <= tmp_V_5_fu_350_p3;
                trunc_ln893_1_reg_910 <= trunc_ln893_1_fu_498_p1;
                trunc_ln893_reg_873 <= trunc_ln893_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_23_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1506_1_reg_925 <= icmp_ln1506_1_fu_620_p2;
                icmp_ln1506_2_reg_935 <= icmp_ln1506_2_fu_745_p2;
                icmp_ln1506_3_reg_940 <= icmp_ln1506_3_fu_751_p2;
                icmp_ln1506_reg_920 <= icmp_ln1506_fu_614_p2;
                p_Result_16_reg_930 <= p_Result_16_fu_723_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_23_fu_124_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    output_0_V_addr_1_reg_827(3 downto 1) <= zext_ln885_fu_147_p1(4 - 1 downto 0)(3 downto 1);
                output_0_V_addr_reg_822 <= i_cast29_fu_132_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    output_0_V_addr_1_reg_827_pp0_iter1_reg(3 downto 1) <= output_0_V_addr_1_reg_827(3 downto 1);
                    output_0_V_addr_1_reg_827_pp0_iter2_reg(3 downto 1) <= output_0_V_addr_1_reg_827_pp0_iter1_reg(3 downto 1);
                output_0_V_addr_reg_822_pp0_iter1_reg <= output_0_V_addr_reg_822;
                tmp_23_reg_818 <= ap_phi_mux_i_phi_fu_111_p4(4 downto 4);
                tmp_23_reg_818_pp0_iter1_reg <= tmp_23_reg_818;
                tmp_23_reg_818_pp0_iter2_reg <= tmp_23_reg_818_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Val2_4_reg_878_pp0_iter1_reg <= p_Val2_4_reg_878;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_reg_818_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln1506_1_reg_950 <= select_ln1506_1_fu_811_p3;
            end if;
        end if;
    end process;
    output_0_V_addr_1_reg_827(0) <= '1';
    output_0_V_addr_1_reg_827_pp0_iter1_reg(0) <= '1';
    output_0_V_addr_1_reg_827_pp0_iter2_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_23_fu_124_p3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_23_fu_124_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_23_fu_124_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln121_fu_152_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv5_2));
    add_ln908_1_fu_629_p2 <= std_logic_vector(unsigned(sub_ln894_1_reg_894) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln908_fu_306_p2 <= std_logic_vector(unsigned(sub_ln894_fu_198_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln915_1_fu_710_p2 <= std_logic_vector(unsigned(sub_ln915_1_fu_705_p2) + unsigned(select_ln893_1_fu_697_p3));
    add_ln915_fu_574_p2 <= std_logic_vector(unsigned(sub_ln915_fu_569_p2) + unsigned(select_ln893_fu_561_p3));
    and_ln1506_1_fu_772_p2 <= (icmp_ln885_fu_767_p2 and and_ln1506_fu_761_p2);
    and_ln1506_2_fu_794_p2 <= (or_ln1506_1_fu_790_p2 and grp_fu_880_p_dout0);
    and_ln1506_3_fu_805_p2 <= (icmp_ln885_1_fu_800_p2 and and_ln1506_2_fu_794_p2);
    and_ln1506_fu_761_p2 <= (or_ln1506_fu_757_p2 and grp_fu_880_p_dout0);
    and_ln899_1_fu_312_p2 <= (xor_ln899_fu_278_p2 and p_Result_11_fu_284_p3);
    and_ln899_2_fu_436_p2 <= (tmp_V_5_fu_350_p3 and or_ln899_fu_430_p2);
    and_ln899_3_fu_484_p2 <= (xor_ln899_1_fu_456_p2 and p_Result_15_fu_462_p3);
    and_ln899_fu_258_p2 <= (tmp_V_4_fu_172_p3 and or_ln899_2_fu_252_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_23_fu_124_p3)
    begin
        if ((tmp_23_fu_124_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_111_p4_assign_proc : process(i_reg_107, tmp_23_reg_818, ap_CS_fsm_pp0_stage0, add_ln121_reg_832, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_23_reg_818 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_111_p4 <= add_ln121_reg_832;
        else 
            ap_phi_mux_i_phi_fu_111_p4 <= i_reg_107;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln734_1_fu_786_p1 <= p_Result_16_reg_930;
    bitcast_ln734_fu_599_p1 <= p_Result_12_fu_587_p5;
    empty_54_fu_137_p1 <= ap_phi_mux_i_phi_fu_111_p4(4 - 1 downto 0);
    grp_fu_119_ce <= ap_const_logic_1;
    grp_fu_119_opcode <= ap_const_lv5_4;

    grp_fu_119_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, bitcast_ln734_fu_599_p1, bitcast_ln734_1_fu_786_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_119_p0 <= bitcast_ln734_1_fu_786_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_119_p0 <= bitcast_ln734_fu_599_p1;
            else 
                grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_119_p1 <= ap_const_lv64_0;
    grp_fu_119_p2 <= grp_fu_880_p_dout0;
    grp_fu_880_p_ce <= ap_const_logic_1;
    grp_fu_880_p_din0 <= grp_fu_119_p0;
    grp_fu_880_p_din1 <= ap_const_lv64_0;
    grp_fu_880_p_opcode <= ap_const_lv5_4;
    i_cast29_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_111_p4),64));
    icmp_ln1506_1_fu_620_p2 <= "1" when (trunc_ln5_fu_604_p4 = ap_const_lv52_0) else "0";
    icmp_ln1506_2_fu_745_p2 <= "0" when (add_ln915_1_fu_710_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln1506_3_fu_751_p2 <= "1" when (trunc_ln1506_1_fu_735_p4 = ap_const_lv52_0) else "0";
    icmp_ln1506_fu_614_p2 <= "0" when (add_ln915_fu_574_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln885_1_fu_800_p2 <= "0" when (p_Val2_4_reg_878_pp0_iter1_reg = ap_const_lv32_0) else "1";
    icmp_ln885_fu_767_p2 <= "0" when (p_Val2_s_reg_837 = ap_const_lv32_0) else "1";
    icmp_ln896_1_fu_398_p2 <= "1" when (signed(tmp_29_fu_388_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln896_fu_220_p2 <= "1" when (signed(tmp_25_fu_210_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln899_1_fu_442_p2 <= "0" when (and_ln899_2_fu_436_p2 = ap_const_lv32_0) else "1";
    icmp_ln899_fu_264_p2 <= "0" when (and_ln899_fu_258_p2 = ap_const_lv32_0) else "1";
    icmp_ln908_1_fu_470_p2 <= "1" when (signed(lsb_index_1_fu_382_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln908_fu_292_p2 <= "1" when (signed(lsb_index_fu_204_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_1_fu_368_p3_proc : process(p_Result_14_fu_358_p4)
    begin
        l_1_fu_368_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_14_fu_358_p4(i) = '1' then
                l_1_fu_368_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_190_p3_proc : process(p_Result_10_fu_180_p4)
    begin
        l_fu_190_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_10_fu_180_p4(i) = '1' then
                l_fu_190_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_382_p2 <= std_logic_vector(unsigned(sub_ln894_1_fu_376_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lsb_index_fu_204_p2 <= std_logic_vector(unsigned(sub_ln894_fu_198_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln897_1_fu_418_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln897_1_fu_414_p1(31-1 downto 0)))));
    lshr_ln897_fu_240_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln897_fu_236_p1(31-1 downto 0)))));
    lshr_ln908_1_fu_638_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_626_p1),to_integer(unsigned('0' & zext_ln908_1_fu_634_p1(31-1 downto 0)))));
    lshr_ln908_fu_508_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_fu_502_p1),to_integer(unsigned('0' & zext_ln908_fu_505_p1(31-1 downto 0)))));
    m_2_fu_523_p3 <= 
        lshr_ln908_fu_508_p2 when (icmp_ln908_reg_853(0) = '1') else 
        shl_ln909_fu_517_p2;
    m_3_fu_533_p2 <= std_logic_vector(unsigned(m_2_fu_523_p3) + unsigned(zext_ln911_fu_530_p1));
    m_4_fu_659_p3 <= 
        lshr_ln908_1_fu_638_p2 when (icmp_ln908_1_reg_900(0) = '1') else 
        shl_ln909_1_fu_653_p2;
    m_5_fu_669_p2 <= std_logic_vector(unsigned(m_4_fu_659_p3) + unsigned(zext_ln911_1_fu_666_p1));
    m_8_fu_539_p4 <= m_3_fu_533_p2(63 downto 1);
    m_fu_675_p4 <= m_5_fu_669_p2(63 downto 1);
    or_ln121_fu_141_p2 <= (empty_54_fu_137_p1 or ap_const_lv4_1);
    or_ln1506_1_fu_790_p2 <= (icmp_ln1506_3_reg_940 or icmp_ln1506_2_reg_935);
    or_ln1506_fu_757_p2 <= (icmp_ln1506_reg_920 or icmp_ln1506_1_reg_925);
    or_ln899_2_fu_252_p2 <= (shl_ln899_fu_246_p2 or lshr_ln897_fu_240_p2);
    or_ln899_fu_430_p2 <= (shl_ln899_1_fu_424_p2 or lshr_ln897_1_fu_418_p2);

    output_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, output_0_V_addr_1_reg_827_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, zext_ln885_fu_147_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_V_address0 <= output_0_V_addr_1_reg_827_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_V_address0 <= zext_ln885_fu_147_p1(4 - 1 downto 0);
        else 
            output_0_V_address0 <= "XXXX";
        end if; 
    end process;


    output_0_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, output_0_V_addr_reg_822_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast29_fu_132_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_0_V_address1 <= output_0_V_addr_reg_822_pp0_iter1_reg;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_V_address1 <= i_cast29_fu_132_p1(4 - 1 downto 0);
        else 
            output_0_V_address1 <= "XXXX";
        end if; 
    end process;


    output_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_0_V_ce1 <= ap_const_logic_1;
        else 
            output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= select_ln1506_1_reg_950;
    output_0_V_d1 <= 
        ap_const_lv32_0 when (and_ln1506_1_fu_772_p2(0) = '1') else 
        p_Val2_s_reg_837;

    output_0_V_we0_assign_proc : process(tmp_23_reg_818_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_23_reg_818_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_we1_assign_proc : process(tmp_23_reg_818_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_23_reg_818_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_0_V_we1 <= ap_const_logic_1;
        else 
            output_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_10_fu_180_p4_proc : process(tmp_V_4_fu_172_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_10_fu_180_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_172_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_10_fu_180_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_10_fu_180_p4_i) := tmp_V_4_fu_172_p3(32-1-p_Result_10_fu_180_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_10_fu_180_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_11_fu_284_p3 <= tmp_V_4_fu_172_p3(to_integer(unsigned(lsb_index_fu_204_p2)) downto to_integer(unsigned(lsb_index_fu_204_p2))) when (to_integer(unsigned(lsb_index_fu_204_p2))>= 0 and to_integer(unsigned(lsb_index_fu_204_p2))<=31) else "-";
    p_Result_12_fu_587_p5 <= (tmp_fu_580_p3 & zext_ln912_fu_549_p1(51 downto 0));
    p_Result_13_fu_336_p3 <= output_0_V_q0(31 downto 31);
    
    p_Result_14_fu_358_p4_proc : process(tmp_V_5_fu_350_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_14_fu_358_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_350_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_14_fu_358_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_14_fu_358_p4_i) := tmp_V_5_fu_350_p3(32-1-p_Result_14_fu_358_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_14_fu_358_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_15_fu_462_p3 <= tmp_V_5_fu_350_p3(to_integer(unsigned(lsb_index_1_fu_382_p2)) downto to_integer(unsigned(lsb_index_1_fu_382_p2))) when (to_integer(unsigned(lsb_index_1_fu_382_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_382_p2))<=31) else "-";
    p_Result_16_fu_723_p5 <= (tmp_1_fu_716_p3 & zext_ln912_1_fu_685_p1(51 downto 0));
    p_Result_7_fu_689_p3 <= m_5_fu_669_p2(54 downto 54);
    p_Result_9_fu_158_p3 <= output_0_V_q1(31 downto 31);
    p_Result_s_fu_553_p3 <= m_3_fu_533_p2(54 downto 54);
    select_ln1506_1_fu_811_p3 <= 
        ap_const_lv32_0 when (and_ln1506_3_fu_805_p2(0) = '1') else 
        p_Val2_4_reg_878_pp0_iter1_reg;
    select_ln893_1_fu_697_p3 <= 
        ap_const_lv11_3FF when (p_Result_7_fu_689_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln893_fu_561_p3 <= 
        ap_const_lv11_3FF when (p_Result_s_fu_553_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln896_1_fu_476_p3 <= 
        icmp_ln899_1_fu_442_p2 when (icmp_ln896_1_fu_398_p2(0) = '1') else 
        p_Result_15_fu_462_p3;
    select_ln896_fu_298_p3 <= 
        icmp_ln899_fu_264_p2 when (icmp_ln896_fu_220_p2(0) = '1') else 
        p_Result_11_fu_284_p3;
    select_ln908_2_fu_490_p3 <= 
        select_ln896_1_fu_476_p3 when (icmp_ln908_1_fu_470_p2(0) = '1') else 
        and_ln899_3_fu_484_p2;
    select_ln908_fu_324_p3 <= 
        select_ln896_fu_298_p3 when (icmp_ln908_fu_292_p2(0) = '1') else 
        and_ln899_1_fu_312_p2;
    shl_ln899_1_fu_424_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_1_fu_382_p2(31-1 downto 0)))));
    shl_ln899_fu_246_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_204_p2(31-1 downto 0)))));
    shl_ln909_1_fu_653_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_1_fu_626_p1),to_integer(unsigned('0' & zext_ln909_1_fu_649_p1(31-1 downto 0)))));
    shl_ln909_fu_517_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_fu_502_p1),to_integer(unsigned('0' & zext_ln909_fu_514_p1(31-1 downto 0)))));
    sub_ln894_1_fu_376_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_1_fu_368_p3));
    sub_ln894_fu_198_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_190_p3));
    sub_ln897_1_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln897_1_fu_404_p1));
    sub_ln897_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln897_fu_226_p1));
    sub_ln909_1_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_1_reg_894));
    sub_ln909_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_198_p2));
    sub_ln915_1_fu_705_p2 <= std_logic_vector(unsigned(ap_const_lv11_18) - unsigned(trunc_ln893_1_reg_910));
    sub_ln915_fu_569_p2 <= std_logic_vector(unsigned(ap_const_lv11_18) - unsigned(trunc_ln893_reg_873));
    tmp_1_fu_716_p3 <= (p_Result_13_reg_884 & add_ln915_1_fu_710_p2);
    tmp_23_fu_124_p3 <= ap_phi_mux_i_phi_fu_111_p4(4 downto 4);
    tmp_25_fu_210_p4 <= lsb_index_fu_204_p2(31 downto 1);
    tmp_26_fu_270_p3 <= lsb_index_fu_204_p2(31 downto 31);
    tmp_29_fu_388_p4 <= lsb_index_1_fu_382_p2(31 downto 1);
    tmp_30_fu_448_p3 <= lsb_index_1_fu_382_p2(31 downto 31);
    tmp_V_2_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(output_0_V_q0));
    tmp_V_4_fu_172_p3 <= 
        tmp_V_fu_166_p2 when (p_Result_9_fu_158_p3(0) = '1') else 
        output_0_V_q1;
    tmp_V_5_fu_350_p3 <= 
        tmp_V_2_fu_344_p2 when (p_Result_13_fu_336_p3(0) = '1') else 
        output_0_V_q0;
    tmp_V_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(output_0_V_q1));
    tmp_fu_580_p3 <= (p_Result_9_reg_843 & add_ln915_fu_574_p2);
    trunc_ln1506_1_fu_735_p4 <= m_5_fu_669_p2(52 downto 1);
    trunc_ln5_fu_604_p4 <= m_3_fu_533_p2(52 downto 1);
    trunc_ln893_1_fu_498_p1 <= l_1_fu_368_p3(11 - 1 downto 0);
    trunc_ln893_fu_332_p1 <= l_fu_190_p3(11 - 1 downto 0);
    trunc_ln897_1_fu_404_p1 <= sub_ln894_1_fu_376_p2(6 - 1 downto 0);
    trunc_ln897_fu_226_p1 <= sub_ln894_fu_198_p2(6 - 1 downto 0);
    xor_ln899_1_fu_456_p2 <= (tmp_30_fu_448_p3 xor ap_const_lv1_1);
    xor_ln899_fu_278_p2 <= (tmp_26_fu_270_p3 xor ap_const_lv1_1);
    zext_ln885_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_fu_141_p2),64));
    zext_ln897_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_1_fu_408_p2),32));
    zext_ln897_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_230_p2),32));
    zext_ln907_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_889),64));
    zext_ln907_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_848),64));
    zext_ln908_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_1_fu_629_p2),64));
    zext_ln908_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_reg_858),64));
    zext_ln909_1_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln909_1_fu_644_p2),64));
    zext_ln909_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln909_reg_863),64));
    zext_ln911_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln908_2_reg_905),64));
    zext_ln911_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln908_reg_868),64));
    zext_ln912_1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_675_p4),64));
    zext_ln912_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_8_fu_539_p4),64));
end behav;
