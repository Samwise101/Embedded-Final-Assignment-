-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference_hwmm_layer4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference_hwmm_layer4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_layer4_weights_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_layer4_weights_V_ce0 : STD_LOGIC;
    signal weights_layer4_weights_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_layer4_weights_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_layer4_weights_V_ce1 : STD_LOGIC;
    signal weights_layer4_weights_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_reg_265 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_V_8_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_290 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_V_9_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_315 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_V_10_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_reg_340 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_V_11_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_365 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_5_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_10_reg_1282 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state15_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal tmp_14_reg_1327 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1187_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_377_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_reg_1191 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln1118_1_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_1_reg_1196 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln79_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln79_3_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_3_reg_1231 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1237_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_1_fu_591_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_1_reg_1241 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal zext_ln79_1_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_1_reg_1271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln79_4_fu_783_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_4_reg_1276 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_787_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1282_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_2_fu_795_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_2_reg_1286 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal zext_ln79_2_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_2_reg_1316 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln79_5_fu_987_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_5_reg_1321 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_991_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1327_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_3_fu_999_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_3_reg_1331 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal add_ln75_fu_1181_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_condition_pp3_exit_iter1_state16 : STD_LOGIC;
    signal j_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k_phi_fu_269_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_1_phi_fu_294_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_k_2_phi_fu_319_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_k_3_phi_fu_344_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln1118_2_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast5_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_5_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast18_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_7_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_cast6_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_10_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_12_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_2_cast7_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_15_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_2_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_17_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_3_cast8_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_20_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_3_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1118_fu_383_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_395_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_387_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_fu_407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_1_fu_417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_27_fu_433_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln79_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_448_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_460_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1118_3_fu_456_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_4_fu_468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_2_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_3_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_1_fu_502_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_496_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_fu_510_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_4_fu_530_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_fu_540_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_1_fu_524_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_4_fu_548_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln75_fu_569_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1118_1_fu_597_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_609_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_cast_fu_601_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_6_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_4_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_5_fu_627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_29_fu_642_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln79_1_fu_646_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_657_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_669_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1118_8_fu_665_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_9_fu_677_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_6_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_7_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_fu_711_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_2_fu_705_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_5_fu_719_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_9_fu_739_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_fu_749_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_3_fu_733_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_6_fu_757_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln75_1_fu_773_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1118_2_fu_801_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_813_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_cast_fu_805_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_11_fu_821_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_8_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_9_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_fu_846_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln79_2_fu_850_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_861_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_873_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1118_13_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_14_fu_881_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_10_fu_885_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_11_fu_891_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_7_fu_915_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_4_fu_909_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_7_fu_923_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_13_fu_943_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_8_fu_953_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_5_fu_937_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_8_fu_961_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln75_2_fu_977_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1118_3_fu_1005_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_1017_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_cast_fu_1009_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_16_fu_1025_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_12_fu_1029_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_13_fu_1035_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_1050_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln79_3_fu_1054_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_1065_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_1077_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1118_18_fu_1073_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_19_fu_1085_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_14_fu_1089_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1118_15_fu_1095_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_10_fu_1119_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_6_fu_1113_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_9_fu_1127_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_18_fu_1147_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_11_fu_1157_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_7_fu_1141_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_10_fu_1165_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_mul_12s_32s_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component nn_inference_hwmm_layer4_weights_layer4_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    weights_layer4_weights_V_U : component nn_inference_hwmm_layer4_weights_layer4_weights_V
    generic map (
        DataWidth => 12,
        AddressRange => 160,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer4_weights_V_address0,
        ce0 => weights_layer4_weights_V_ce0,
        q0 => weights_layer4_weights_V_q0,
        address1 => weights_layer4_weights_V_address1,
        ce1 => weights_layer4_weights_V_ce1,
        q1 => weights_layer4_weights_V_q1);

    mul_12s_32s_40_1_1_U43 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => reg_365,
        din1 => input_0_q1,
        dout => mul_ln1192_fu_496_p2);

    mul_12s_32s_40_1_1_U44 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer4_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_1_fu_524_p2);

    mul_12s_32s_40_1_1_U45 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => reg_365,
        din1 => input_0_q1,
        dout => mul_ln1192_2_fu_705_p2);

    mul_12s_32s_40_1_1_U46 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer4_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_3_fu_733_p2);

    mul_12s_32s_40_1_1_U47 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => reg_365,
        din1 => input_0_q1,
        dout => mul_ln1192_4_fu_909_p2);

    mul_12s_32s_40_1_1_U48 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer4_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_5_fu_937_p2);

    mul_12s_32s_40_1_1_U49 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => reg_365,
        din1 => input_0_q1,
        dout => mul_ln1192_6_fu_1113_p2);

    mul_12s_32s_40_1_1_U50 : component nn_inference_mul_12s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer4_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_7_fu_1141_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_253 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_253 <= add_ln75_fu_1181_p2;
            end if; 
        end if;
    end process;

    k_1_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_1_reg_290 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_5_reg_1237 = ap_const_lv1_0))) then 
                k_1_reg_290 <= add_ln79_1_reg_1241;
            end if; 
        end if;
    end process;

    k_2_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_2_reg_315 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_10_reg_1282 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
                k_2_reg_315 <= add_ln79_2_reg_1286;
            end if; 
        end if;
    end process;

    k_3_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_3_reg_340 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_14_reg_1327 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
                k_3_reg_340 <= add_ln79_3_reg_1331;
            end if; 
        end if;
    end process;

    k_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k_reg_265 <= ap_const_lv6_0;
            elsif (((tmp_reg_1187 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_265 <= add_ln79_reg_1191;
            end if; 
        end if;
    end process;

    sum_V_10_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_10_reg_327 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (tmp_10_reg_1282_pp2_iter1_reg = ap_const_lv1_0))) then 
                sum_V_10_reg_327 <= ret_V_8_fu_961_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_11_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_V_11_reg_352 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (tmp_14_reg_1327_pp3_iter1_reg = ap_const_lv1_0))) then 
                sum_V_11_reg_352 <= ret_V_10_fu_1165_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_8_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                sum_V_8_reg_277 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_reg_1187_pp0_iter1_reg = ap_const_lv1_0))) then 
                sum_V_8_reg_277 <= ret_V_4_fu_548_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_9_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_V_9_reg_302 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_5_reg_1237_pp1_iter1_reg = ap_const_lv1_0))) then 
                sum_V_9_reg_302 <= ret_V_6_fu_757_p2(39 downto 8);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_5_fu_583_p3 = ap_const_lv1_0))) then
                add_ln79_1_reg_1241 <= add_ln79_1_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_10_fu_787_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln79_2_reg_1286 <= add_ln79_2_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (tmp_14_fu_991_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln79_3_reg_1331 <= add_ln79_3_fu_999_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_369_p3 = ap_const_lv1_0))) then
                add_ln79_reg_1191 <= add_ln79_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_reg_1187 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_14_reg_1327 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_10_reg_1282 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_5_reg_1237 = ap_const_lv1_0)))) then
                reg_365 <= weights_layer4_weights_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_10_reg_1282 <= ap_phi_mux_k_2_phi_fu_319_p4(5 downto 5);
                tmp_10_reg_1282_pp2_iter1_reg <= tmp_10_reg_1282;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                tmp_14_reg_1327 <= ap_phi_mux_k_3_phi_fu_344_p4(5 downto 5);
                tmp_14_reg_1327_pp3_iter1_reg <= tmp_14_reg_1327;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_5_reg_1237 <= ap_phi_mux_k_1_phi_fu_294_p4(5 downto 5);
                tmp_5_reg_1237_pp1_iter1_reg <= tmp_5_reg_1237;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_1187 <= ap_phi_mux_k_phi_fu_269_p4(5 downto 5);
                tmp_reg_1187_pp0_iter1_reg <= tmp_reg_1187;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_369_p3 = ap_const_lv1_0))) then
                    zext_ln1118_1_reg_1196(3 downto 0) <= zext_ln1118_1_fu_413_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    zext_ln79_1_reg_1271(0) <= zext_ln79_1_fu_779_p1(0);    zext_ln79_1_reg_1271(3 downto 2) <= zext_ln79_1_fu_779_p1(3 downto 2);
                    zext_ln79_4_reg_1276(0) <= zext_ln79_4_fu_783_p1(0);    zext_ln79_4_reg_1276(3 downto 2) <= zext_ln79_4_fu_783_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    zext_ln79_2_reg_1316(3 downto 2) <= zext_ln79_2_fu_983_p1(3 downto 2);
                    zext_ln79_5_reg_1321(3 downto 2) <= zext_ln79_5_fu_987_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    zext_ln79_3_reg_1231(3 downto 1) <= zext_ln79_3_fu_579_p1(3 downto 1);
                    zext_ln79_reg_1226(3 downto 1) <= zext_ln79_fu_575_p1(3 downto 1);
            end if;
        end if;
    end process;
    zext_ln1118_1_reg_1196(7 downto 4) <= "0000";
    zext_ln79_reg_1226(0) <= '1';
    zext_ln79_reg_1226(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln79_3_reg_1231(0) <= '1';
    zext_ln79_3_reg_1231(7 downto 4) <= "0000";
    zext_ln79_1_reg_1271(1) <= '1';
    zext_ln79_1_reg_1271(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln79_4_reg_1276(1) <= '1';
    zext_ln79_4_reg_1276(7 downto 4) <= "0000";
    zext_ln79_2_reg_1316(1 downto 0) <= "11";
    zext_ln79_2_reg_1316(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln79_5_reg_1321(1 downto 0) <= "11";
    zext_ln79_5_reg_1321(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_fu_369_p3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_5_fu_583_p3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, tmp_10_fu_787_p3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_369_p3 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_369_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_5_fu_583_p3 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_5_fu_583_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_10_fu_787_p3 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_10_fu_787_p3 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1118_10_fu_885_p2 <= std_logic_vector(unsigned(zext_ln1118_13_fu_869_p1) + unsigned(zext_ln1118_14_fu_881_p1));
    add_ln1118_11_fu_891_p2 <= std_logic_vector(unsigned(add_ln1118_10_fu_885_p2) + unsigned(zext_ln79_4_reg_1276));
    add_ln1118_12_fu_1029_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_1009_p3) + unsigned(zext_ln1118_16_fu_1025_p1));
    add_ln1118_13_fu_1035_p2 <= std_logic_vector(unsigned(add_ln1118_12_fu_1029_p2) + unsigned(zext_ln79_5_reg_1321));
    add_ln1118_14_fu_1089_p2 <= std_logic_vector(unsigned(zext_ln1118_18_fu_1073_p1) + unsigned(zext_ln1118_19_fu_1085_p1));
    add_ln1118_15_fu_1095_p2 <= std_logic_vector(unsigned(add_ln1118_14_fu_1089_p2) + unsigned(zext_ln79_5_reg_1321));
    add_ln1118_1_fu_417_p2 <= std_logic_vector(unsigned(add_ln1118_fu_407_p2) + unsigned(zext_ln1118_1_fu_413_p1));
    add_ln1118_2_fu_472_p2 <= std_logic_vector(unsigned(zext_ln1118_3_fu_456_p1) + unsigned(zext_ln1118_4_fu_468_p1));
    add_ln1118_3_fu_478_p2 <= std_logic_vector(unsigned(add_ln1118_2_fu_472_p2) + unsigned(zext_ln1118_1_reg_1196));
    add_ln1118_4_fu_621_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_601_p3) + unsigned(zext_ln1118_6_fu_617_p1));
    add_ln1118_5_fu_627_p2 <= std_logic_vector(unsigned(add_ln1118_4_fu_621_p2) + unsigned(zext_ln79_3_reg_1231));
    add_ln1118_6_fu_681_p2 <= std_logic_vector(unsigned(zext_ln1118_8_fu_665_p1) + unsigned(zext_ln1118_9_fu_677_p1));
    add_ln1118_7_fu_687_p2 <= std_logic_vector(unsigned(add_ln1118_6_fu_681_p2) + unsigned(zext_ln79_3_reg_1231));
    add_ln1118_8_fu_825_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_805_p3) + unsigned(zext_ln1118_11_fu_821_p1));
    add_ln1118_9_fu_831_p2 <= std_logic_vector(unsigned(add_ln1118_8_fu_825_p2) + unsigned(zext_ln79_4_reg_1276));
    add_ln1118_fu_407_p2 <= std_logic_vector(unsigned(tmp_cast_fu_387_p3) + unsigned(zext_ln1118_fu_403_p1));
    add_ln75_fu_1181_p2 <= std_logic_vector(unsigned(j_reg_253) + unsigned(ap_const_lv4_4));
    add_ln79_1_fu_591_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_1_phi_fu_294_p4) + unsigned(ap_const_lv6_2));
    add_ln79_2_fu_795_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_2_phi_fu_319_p4) + unsigned(ap_const_lv6_2));
    add_ln79_3_fu_999_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_3_phi_fu_344_p4) + unsigned(ap_const_lv6_2));
    add_ln79_fu_377_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_269_p4) + unsigned(ap_const_lv6_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_fu_369_p3)
    begin
        if ((tmp_fu_369_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(tmp_5_fu_583_p3)
    begin
        if ((tmp_5_fu_583_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(tmp_10_fu_787_p3)
    begin
        if ((tmp_10_fu_787_p3 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state16_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage0, tmp_14_fu_991_p3, ap_block_pp3_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (tmp_14_fu_991_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_1_phi_fu_294_p4_assign_proc : process(k_1_reg_290, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_5_reg_1237, add_ln79_1_reg_1241, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_5_reg_1237 = ap_const_lv1_0))) then 
            ap_phi_mux_k_1_phi_fu_294_p4 <= add_ln79_1_reg_1241;
        else 
            ap_phi_mux_k_1_phi_fu_294_p4 <= k_1_reg_290;
        end if; 
    end process;


    ap_phi_mux_k_2_phi_fu_319_p4_assign_proc : process(k_2_reg_315, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_10_reg_1282, add_ln79_2_reg_1286, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_10_reg_1282 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_k_2_phi_fu_319_p4 <= add_ln79_2_reg_1286;
        else 
            ap_phi_mux_k_2_phi_fu_319_p4 <= k_2_reg_315;
        end if; 
    end process;


    ap_phi_mux_k_3_phi_fu_344_p4_assign_proc : process(k_3_reg_340, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_14_reg_1327, add_ln79_3_reg_1331, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_14_reg_1327 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_k_3_phi_fu_344_p4 <= add_ln79_3_reg_1331;
        else 
            ap_phi_mux_k_3_phi_fu_344_p4 <= k_3_reg_340;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_269_p4_assign_proc : process(k_reg_265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_1187, add_ln79_reg_1191, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_1187 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_k_phi_fu_269_p4 <= add_ln79_reg_1191;
        else 
            ap_phi_mux_k_phi_fu_269_p4 <= k_reg_265;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;
    empty_27_fu_433_p1 <= k_reg_265(4 - 1 downto 0);
    empty_29_fu_642_p1 <= k_1_reg_290(4 - 1 downto 0);
    empty_31_fu_846_p1 <= k_2_reg_315(4 - 1 downto 0);
    empty_33_fu_1050_p1 <= k_3_reg_340(4 - 1 downto 0);

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln77_fu_443_p1, zext_ln77_1_fu_652_p1, zext_ln77_2_fu_856_p1, zext_ln77_3_fu_1060_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            input_0_address0 <= zext_ln77_3_fu_1060_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            input_0_address0 <= zext_ln77_2_fu_856_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_0_address0 <= zext_ln77_1_fu_652_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_address0 <= zext_ln77_fu_443_p1(4 - 1 downto 0);
        else 
            input_0_address0 <= "XXXX";
        end if; 
    end process;


    input_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, k_cast5_fu_428_p1, k_1_cast6_fu_637_p1, k_2_cast7_fu_841_p1, k_3_cast8_fu_1045_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            input_0_address1 <= k_3_cast8_fu_1045_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            input_0_address1 <= k_2_cast7_fu_841_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_0_address1 <= k_1_cast6_fu_637_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_address1 <= k_cast5_fu_428_p1(4 - 1 downto 0);
        else 
            input_0_address1 <= "XXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_cast18_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_253),64));
    k_1_cast6_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_290),64));
    k_2_cast7_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_315),64));
    k_3_cast8_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_reg_340),64));
    k_cast5_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_265),64));
    lhs_10_fu_1119_p3 <= (sum_V_11_reg_352 & ap_const_lv8_0);
    lhs_11_fu_1157_p3 <= (tmp_18_fu_1147_p4 & ap_const_lv8_0);
    lhs_1_fu_502_p3 <= (sum_V_8_reg_277 & ap_const_lv8_0);
    lhs_2_fu_540_p3 <= (tmp_4_fu_530_p4 & ap_const_lv8_0);
    lhs_4_fu_711_p3 <= (sum_V_9_reg_302 & ap_const_lv8_0);
    lhs_5_fu_749_p3 <= (tmp_9_fu_739_p4 & ap_const_lv8_0);
    lhs_7_fu_915_p3 <= (sum_V_10_reg_327 & ap_const_lv8_0);
    lhs_8_fu_953_p3 <= (tmp_13_fu_943_p4 & ap_const_lv8_0);
    or_ln75_1_fu_773_p2 <= (j_reg_253 or ap_const_lv4_2);
    or_ln75_2_fu_977_p2 <= (j_reg_253 or ap_const_lv4_3);
    or_ln75_fu_569_p2 <= (j_reg_253 or ap_const_lv4_1);
    or_ln79_1_fu_646_p2 <= (empty_29_fu_642_p1 or ap_const_lv4_1);
    or_ln79_2_fu_850_p2 <= (empty_31_fu_846_p1 or ap_const_lv4_1);
    or_ln79_3_fu_1054_p2 <= (empty_33_fu_1050_p1 or ap_const_lv4_1);
    or_ln79_fu_437_p2 <= (empty_27_fu_433_p1 or ap_const_lv4_1);

    output_0_address0_assign_proc : process(zext_ln79_reg_1226, ap_CS_fsm_state6, zext_ln79_1_reg_1271, ap_CS_fsm_state10, zext_ln79_2_reg_1316, ap_CS_fsm_state14, ap_CS_fsm_state18, j_cast18_fu_564_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_address0 <= zext_ln79_2_reg_1316(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_address0 <= zext_ln79_1_reg_1271(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_address0 <= zext_ln79_reg_1226(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_address0 <= j_cast18_fu_564_p1(4 - 1 downto 0);
        else 
            output_0_address0 <= "XXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(sum_V_8_reg_277, sum_V_9_reg_302, sum_V_10_reg_327, sum_V_11_reg_352, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_d0 <= sum_V_11_reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_d0 <= sum_V_10_reg_327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_d0 <= sum_V_9_reg_302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_d0 <= sum_V_8_reg_277;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1165_p2 <= std_logic_vector(unsigned(lhs_11_fu_1157_p3) + unsigned(mul_ln1192_7_fu_1141_p2));
    ret_V_4_fu_548_p2 <= std_logic_vector(unsigned(lhs_2_fu_540_p3) + unsigned(mul_ln1192_1_fu_524_p2));
    ret_V_5_fu_719_p2 <= std_logic_vector(unsigned(lhs_4_fu_711_p3) + unsigned(mul_ln1192_2_fu_705_p2));
    ret_V_6_fu_757_p2 <= std_logic_vector(unsigned(lhs_5_fu_749_p3) + unsigned(mul_ln1192_3_fu_733_p2));
    ret_V_7_fu_923_p2 <= std_logic_vector(unsigned(lhs_7_fu_915_p3) + unsigned(mul_ln1192_4_fu_909_p2));
    ret_V_8_fu_961_p2 <= std_logic_vector(unsigned(lhs_8_fu_953_p3) + unsigned(mul_ln1192_5_fu_937_p2));
    ret_V_9_fu_1127_p2 <= std_logic_vector(unsigned(lhs_10_fu_1119_p3) + unsigned(mul_ln1192_6_fu_1113_p2));
    ret_V_fu_510_p2 <= std_logic_vector(unsigned(lhs_1_fu_502_p3) + unsigned(mul_ln1192_fu_496_p2));
    tmp_10_cast_fu_805_p3 <= (trunc_ln1118_2_fu_801_p1 & ap_const_lv3_0);
    tmp_10_fu_787_p3 <= ap_phi_mux_k_2_phi_fu_319_p4(5 downto 5);
    tmp_11_fu_861_p3 <= (or_ln79_2_fu_850_p2 & ap_const_lv3_0);
    tmp_12_fu_873_p3 <= (or_ln79_2_fu_850_p2 & ap_const_lv1_0);
    tmp_13_fu_943_p4 <= ret_V_7_fu_923_p2(39 downto 8);
    tmp_14_fu_991_p3 <= ap_phi_mux_k_3_phi_fu_344_p4(5 downto 5);
    tmp_15_cast_fu_1009_p3 <= (trunc_ln1118_3_fu_1005_p1 & ap_const_lv3_0);
    tmp_15_fu_1017_p3 <= (ap_phi_mux_k_3_phi_fu_344_p4 & ap_const_lv1_0);
    tmp_16_fu_1065_p3 <= (or_ln79_3_fu_1054_p2 & ap_const_lv3_0);
    tmp_17_fu_1077_p3 <= (or_ln79_3_fu_1054_p2 & ap_const_lv1_0);
    tmp_18_fu_1147_p4 <= ret_V_9_fu_1127_p2(39 downto 8);
    tmp_1_fu_395_p3 <= (ap_phi_mux_k_phi_fu_269_p4 & ap_const_lv1_0);
    tmp_2_fu_448_p3 <= (or_ln79_fu_437_p2 & ap_const_lv3_0);
    tmp_3_fu_460_p3 <= (or_ln79_fu_437_p2 & ap_const_lv1_0);
    tmp_4_fu_530_p4 <= ret_V_fu_510_p2(39 downto 8);
    tmp_5_cast_fu_601_p3 <= (trunc_ln1118_1_fu_597_p1 & ap_const_lv3_0);
    tmp_5_fu_583_p3 <= ap_phi_mux_k_1_phi_fu_294_p4(5 downto 5);
    tmp_6_fu_609_p3 <= (ap_phi_mux_k_1_phi_fu_294_p4 & ap_const_lv1_0);
    tmp_7_fu_657_p3 <= (or_ln79_1_fu_646_p2 & ap_const_lv3_0);
    tmp_8_fu_669_p3 <= (or_ln79_1_fu_646_p2 & ap_const_lv1_0);
    tmp_9_fu_739_p4 <= ret_V_5_fu_719_p2(39 downto 8);
    tmp_cast_fu_387_p3 <= (trunc_ln1118_fu_383_p1 & ap_const_lv3_0);
    tmp_fu_369_p3 <= ap_phi_mux_k_phi_fu_269_p4(5 downto 5);
    tmp_s_fu_813_p3 <= (ap_phi_mux_k_2_phi_fu_319_p4 & ap_const_lv1_0);
    trunc_ln1118_1_fu_597_p1 <= ap_phi_mux_k_1_phi_fu_294_p4(5 - 1 downto 0);
    trunc_ln1118_2_fu_801_p1 <= ap_phi_mux_k_2_phi_fu_319_p4(5 - 1 downto 0);
    trunc_ln1118_3_fu_1005_p1 <= ap_phi_mux_k_3_phi_fu_344_p4(5 - 1 downto 0);
    trunc_ln1118_fu_383_p1 <= ap_phi_mux_k_phi_fu_269_p4(5 - 1 downto 0);

    weights_layer4_weights_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln1118_5_fu_483_p1, zext_ln1118_10_fu_692_p1, zext_ln1118_15_fu_896_p1, zext_ln1118_20_fu_1100_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            weights_layer4_weights_V_address0 <= zext_ln1118_20_fu_1100_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            weights_layer4_weights_V_address0 <= zext_ln1118_15_fu_896_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            weights_layer4_weights_V_address0 <= zext_ln1118_10_fu_692_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_layer4_weights_V_address0 <= zext_ln1118_5_fu_483_p1(8 - 1 downto 0);
        else 
            weights_layer4_weights_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weights_layer4_weights_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln1118_2_fu_423_p1, zext_ln1118_7_fu_632_p1, zext_ln1118_12_fu_836_p1, zext_ln1118_17_fu_1040_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            weights_layer4_weights_V_address1 <= zext_ln1118_17_fu_1040_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            weights_layer4_weights_V_address1 <= zext_ln1118_12_fu_836_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            weights_layer4_weights_V_address1 <= zext_ln1118_7_fu_632_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            weights_layer4_weights_V_address1 <= zext_ln1118_2_fu_423_p1(8 - 1 downto 0);
        else 
            weights_layer4_weights_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    weights_layer4_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            weights_layer4_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer4_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer4_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            weights_layer4_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer4_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_10_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_7_fu_687_p2),64));
    zext_ln1118_11_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_813_p3),8));
    zext_ln1118_12_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_9_fu_831_p2),64));
    zext_ln1118_13_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_861_p3),8));
    zext_ln1118_14_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_873_p3),8));
    zext_ln1118_15_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_11_fu_891_p2),64));
    zext_ln1118_16_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1017_p3),8));
    zext_ln1118_17_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_13_fu_1035_p2),64));
    zext_ln1118_18_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1065_p3),8));
    zext_ln1118_19_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1077_p3),8));
    zext_ln1118_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_253),8));
    zext_ln1118_20_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_15_fu_1095_p2),64));
    zext_ln1118_2_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_1_fu_417_p2),64));
    zext_ln1118_3_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_448_p3),8));
    zext_ln1118_4_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_460_p3),8));
    zext_ln1118_5_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_3_fu_478_p2),64));
    zext_ln1118_6_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_609_p3),8));
    zext_ln1118_7_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_5_fu_627_p2),64));
    zext_ln1118_8_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_657_p3),8));
    zext_ln1118_9_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_669_p3),8));
    zext_ln1118_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_395_p3),8));
    zext_ln77_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln79_1_fu_646_p2),64));
    zext_ln77_2_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln79_2_fu_850_p2),64));
    zext_ln77_3_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln79_3_fu_1054_p2),64));
    zext_ln77_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln79_fu_437_p2),64));
    zext_ln79_1_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_1_fu_773_p2),64));
    zext_ln79_2_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_2_fu_977_p2),64));
    zext_ln79_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_fu_569_p2),8));
    zext_ln79_4_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_1_fu_773_p2),8));
    zext_ln79_5_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_2_fu_977_p2),8));
    zext_ln79_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_fu_569_p2),64));
end behav;
