-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference_hwmm_layer2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference_hwmm_layer2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_layer2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal weights_layer2_weights_V_ce0 : STD_LOGIC;
    signal weights_layer2_weights_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal weights_layer2_weights_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal weights_layer2_weights_V_ce1 : STD_LOGIC;
    signal weights_layer2_weights_V_q1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_reg_269 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_30_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_7_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_31_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_8_reg_317 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_32_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_9_reg_341 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_33_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln40_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_reg_965 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_1_fu_377_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_reg_970 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln40_fu_381_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln40_reg_975 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_19_reg_982_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_43_fu_427_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_43_reg_996 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1192_fu_439_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_reg_1006 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal or_ln40_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln40_reg_1026 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln44_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_reg_1032 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_543_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_20_reg_1037_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_1_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal empty_45_fu_574_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_45_reg_1051 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1192_16_fu_586_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_16_reg_1061 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal or_ln40_1_fu_675_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln40_1_reg_1081 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln44_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_1087 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_21_reg_1092_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_2_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal or_ln44_2_fu_719_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln44_2_reg_1111 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1192_18_fu_733_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_18_reg_1117 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal or_ln40_2_fu_815_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln40_2_reg_1137 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln44_2_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_2_reg_1143 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state15_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal tmp_22_reg_1148_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_3_fu_832_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal or_ln44_3_fu_859_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln44_3_reg_1167 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1192_20_fu_873_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_20_reg_1173 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal add_ln40_fu_955_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp3_exit_iter1_state16 : STD_LOGIC;
    signal j_reg_257 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln1118_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_cast7_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_30_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_24_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal k_7_cast8_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_25_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_26_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal k_8_cast9_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_27_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_28_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_9_cast10_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_29_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_3_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_404_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_414_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln44_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_fu_455_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1118_fu_463_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_23_fu_473_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_fu_481_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_33_fu_500_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_24_fu_510_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_15_fu_494_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_18_fu_518_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_34_fu_562_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln44_1_fu_592_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_602_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_26_fu_614_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_19_fu_622_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_36_fu_641_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_27_fu_651_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_17_fu_635_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_20_fu_659_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_37_fu_703_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_47_fu_715_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_743_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_29_fu_754_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_21_fu_762_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_39_fu_781_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_30_fu_791_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_19_fu_775_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_22_fu_799_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_40_fu_843_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_49_fu_855_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_883_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_32_fu_894_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_23_fu_902_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_42_fu_921_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_33_fu_931_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_21_fu_915_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_24_fu_939_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_mul_11s_32s_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component nn_inference_hwmm_layer2_weights_layer2_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    weights_layer2_weights_V_U : component nn_inference_hwmm_layer2_weights_layer2_weights_V
    generic map (
        DataWidth => 11,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer2_weights_V_address0,
        ce0 => weights_layer2_weights_V_ce0,
        q0 => weights_layer2_weights_V_q0,
        address1 => weights_layer2_weights_V_address1,
        ce1 => weights_layer2_weights_V_ce1,
        q1 => weights_layer2_weights_V_q1);

    mul_11s_32s_40_1_1_U16 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => input_0_q1,
        dout => mul_ln1192_fu_439_p2);

    mul_11s_32s_40_1_1_U17 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_15_fu_494_p2);

    mul_11s_32s_40_1_1_U18 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => input_0_q1,
        dout => mul_ln1192_16_fu_586_p2);

    mul_11s_32s_40_1_1_U19 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_17_fu_635_p2);

    mul_11s_32s_40_1_1_U20 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => input_0_q1,
        dout => mul_ln1192_18_fu_733_p2);

    mul_11s_32s_40_1_1_U21 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_19_fu_775_p2);

    mul_11s_32s_40_1_1_U22 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => input_0_q1,
        dout => mul_ln1192_20_fu_873_p2);

    mul_11s_32s_40_1_1_U23 : component nn_inference_mul_11s_32s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 40)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => input_0_q0,
        dout => mul_ln1192_21_fu_915_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_365_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_fu_365_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_257 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_257 <= add_ln40_fu_955_p2;
            end if; 
        end if;
    end process;

    k_7_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_7_reg_293 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_20_fu_543_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k_7_reg_293 <= add_ln44_1_fu_551_p2;
            end if; 
        end if;
    end process;

    k_8_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_8_reg_317 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_21_fu_684_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                k_8_reg_317 <= add_ln44_2_fu_692_p2;
            end if; 
        end if;
    end process;

    k_9_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_9_reg_341 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (tmp_22_fu_824_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                k_9_reg_341 <= add_ln44_3_fu_832_p2;
            end if; 
        end if;
    end process;

    k_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_365_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_269 <= ap_const_lv7_0;
            elsif (((tmp_19_fu_385_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_269 <= add_ln44_fu_393_p2;
            end if; 
        end if;
    end process;

    sum_V_30_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_365_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_V_30_reg_280 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_19_reg_982_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_V_30_reg_280 <= ret_V_18_fu_518_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_31_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_V_31_reg_304 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_20_reg_1037_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sum_V_31_reg_304 <= ret_V_20_fu_659_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_32_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_32_reg_328 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (tmp_21_reg_1092_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                sum_V_32_reg_328 <= ret_V_22_fu_799_p2(39 downto 8);
            end if; 
        end if;
    end process;

    sum_V_33_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_V_33_reg_352 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (tmp_22_reg_1148_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                sum_V_33_reg_352 <= ret_V_24_fu_939_p2(39 downto 8);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_fu_385_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_43_reg_996 <= empty_43_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_20_fu_543_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                empty_45_reg_1051 <= empty_45_fu_574_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_20_reg_1037 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_ln1192_16_reg_1061 <= mul_ln1192_16_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_reg_1092 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                mul_ln1192_18_reg_1117 <= mul_ln1192_18_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_reg_1148 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                mul_ln1192_20_reg_1173 <= mul_ln1192_20_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_982 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1192_reg_1006 <= mul_ln1192_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    or_ln40_1_reg_1081(0) <= or_ln40_1_fu_675_p2(0);    or_ln40_1_reg_1081(4 downto 2) <= or_ln40_1_fu_675_p2(4 downto 2);
                    zext_ln44_1_reg_1087(0) <= zext_ln44_1_fu_680_p1(0);    zext_ln44_1_reg_1087(4 downto 2) <= zext_ln44_1_fu_680_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    or_ln40_2_reg_1137(4 downto 2) <= or_ln40_2_fu_815_p2(4 downto 2);
                    zext_ln44_2_reg_1143(4 downto 2) <= zext_ln44_2_fu_820_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    or_ln40_reg_1026(4 downto 1) <= or_ln40_fu_534_p2(4 downto 1);
                    zext_ln44_reg_1032(4 downto 1) <= zext_ln44_fu_539_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_684_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    or_ln44_2_reg_1111(5 downto 1) <= or_ln44_2_fu_719_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_824_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    or_ln44_3_reg_1167(5 downto 1) <= or_ln44_3_fu_859_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_19_reg_982 <= k_reg_269(6 downto 6);
                tmp_19_reg_982_pp0_iter1_reg <= tmp_19_reg_982;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_20_reg_1037 <= k_7_reg_293(6 downto 6);
                tmp_20_reg_1037_pp1_iter1_reg <= tmp_20_reg_1037;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_21_reg_1092 <= k_8_reg_317(6 downto 6);
                tmp_21_reg_1092_pp2_iter1_reg <= tmp_21_reg_1092;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                tmp_22_reg_1148 <= k_9_reg_341(6 downto 6);
                tmp_22_reg_1148_pp3_iter1_reg <= tmp_22_reg_1148;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_365_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln40_reg_975 <= trunc_ln40_fu_381_p1;
                    zext_ln40_1_reg_970(5 downto 0) <= zext_ln40_1_fu_377_p1(5 downto 0);
                    zext_ln40_reg_965(5 downto 0) <= zext_ln40_fu_373_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln40_reg_965(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln40_1_reg_970(10 downto 6) <= "00000";
    or_ln40_reg_1026(0) <= '1';
    zext_ln44_reg_1032(0) <= '1';
    zext_ln44_reg_1032(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln40_1_reg_1081(1) <= '1';
    zext_ln44_1_reg_1087(1) <= '1';
    zext_ln44_1_reg_1087(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln44_2_reg_1111(0) <= '1';
    or_ln40_2_reg_1137(1 downto 0) <= "11";
    zext_ln44_2_reg_1143(1 downto 0) <= "11";
    zext_ln44_2_reg_1143(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln44_3_reg_1167(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_365_p3, ap_CS_fsm_state2, tmp_19_fu_385_p3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_20_fu_543_p3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, tmp_21_fu_684_p3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_365_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_19_fu_385_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((tmp_19_fu_385_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_20_fu_543_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_20_fu_543_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_21_fu_684_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_21_fu_684_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1118_fu_463_p2 <= std_logic_vector(unsigned(tmp_32_fu_455_p3) + unsigned(zext_ln40_1_reg_970));
    add_ln40_fu_955_p2 <= std_logic_vector(unsigned(j_reg_257) + unsigned(ap_const_lv6_4));
    add_ln44_1_fu_551_p2 <= std_logic_vector(unsigned(k_7_reg_293) + unsigned(ap_const_lv7_2));
    add_ln44_2_fu_692_p2 <= std_logic_vector(unsigned(k_8_reg_317) + unsigned(ap_const_lv7_2));
    add_ln44_3_fu_832_p2 <= std_logic_vector(unsigned(k_9_reg_341) + unsigned(ap_const_lv7_2));
    add_ln44_fu_393_p2 <= std_logic_vector(unsigned(k_reg_269) + unsigned(ap_const_lv7_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_19_fu_385_p3)
    begin
        if ((tmp_19_fu_385_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(tmp_20_fu_543_p3)
    begin
        if ((tmp_20_fu_543_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(tmp_21_fu_684_p3)
    begin
        if ((tmp_21_fu_684_p3 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state16_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(tmp_22_fu_824_p3, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_subdone)
    begin
        if (((tmp_22_fu_824_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_365_p3, ap_CS_fsm_state2)
    begin
        if ((((tmp_fu_365_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_fu_365_p3, ap_CS_fsm_state2)
    begin
        if (((tmp_fu_365_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_43_fu_427_p1 <= k_reg_269(6 - 1 downto 0);
    empty_45_fu_574_p1 <= k_7_reg_293(6 - 1 downto 0);
    empty_47_fu_715_p1 <= k_8_reg_317(6 - 1 downto 0);
    empty_49_fu_855_p1 <= k_9_reg_341(6 - 1 downto 0);

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln42_fu_450_p1, ap_block_pp1_stage0, zext_ln42_1_fu_597_p1, ap_block_pp2_stage0, zext_ln42_2_fu_739_p1, zext_ln42_3_fu_879_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            input_0_address0 <= zext_ln42_3_fu_879_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            input_0_address0 <= zext_ln42_2_fu_739_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            input_0_address0 <= zext_ln42_1_fu_597_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_0_address0 <= zext_ln42_fu_450_p1(6 - 1 downto 0);
        else 
            input_0_address0 <= "XXXXXX";
        end if; 
    end process;


    input_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_block_pp0_stage0, k_cast7_fu_399_p1, ap_block_pp1_stage0, k_7_cast8_fu_557_p1, ap_block_pp2_stage0, k_8_cast9_fu_698_p1, k_9_cast10_fu_838_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            input_0_address1 <= k_9_cast10_fu_838_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            input_0_address1 <= k_8_cast9_fu_698_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            input_0_address1 <= k_7_cast8_fu_557_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_0_address1 <= k_cast7_fu_399_p1(6 - 1 downto 0);
        else 
            input_0_address1 <= "XXXXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    k_7_cast8_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_7_reg_293),64));
    k_8_cast9_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_8_reg_317),64));
    k_9_cast10_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_9_reg_341),64));
    k_cast7_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_269),64));
    lhs_23_fu_473_p3 <= (sum_V_30_reg_280 & ap_const_lv8_0);
    lhs_24_fu_510_p3 <= (tmp_33_fu_500_p4 & ap_const_lv8_0);
    lhs_26_fu_614_p3 <= (sum_V_31_reg_304 & ap_const_lv8_0);
    lhs_27_fu_651_p3 <= (tmp_36_fu_641_p4 & ap_const_lv8_0);
    lhs_29_fu_754_p3 <= (sum_V_32_reg_328 & ap_const_lv8_0);
    lhs_30_fu_791_p3 <= (tmp_39_fu_781_p4 & ap_const_lv8_0);
    lhs_32_fu_894_p3 <= (sum_V_33_reg_352 & ap_const_lv8_0);
    lhs_33_fu_931_p3 <= (tmp_42_fu_921_p4 & ap_const_lv8_0);
    or_ln40_1_fu_675_p2 <= (trunc_ln40_reg_975 or ap_const_lv5_2);
    or_ln40_2_fu_815_p2 <= (trunc_ln40_reg_975 or ap_const_lv5_3);
    or_ln40_fu_534_p2 <= (trunc_ln40_reg_975 or ap_const_lv5_1);
    or_ln44_1_fu_592_p2 <= (empty_45_reg_1051 or ap_const_lv6_1);
    or_ln44_2_fu_719_p2 <= (empty_47_fu_715_p1 or ap_const_lv6_1);
    or_ln44_3_fu_859_p2 <= (empty_49_fu_855_p1 or ap_const_lv6_1);
    or_ln44_fu_445_p2 <= (empty_43_reg_996 or ap_const_lv6_1);

    output_0_address0_assign_proc : process(zext_ln40_reg_965, ap_CS_fsm_state6, zext_ln44_reg_1032, ap_CS_fsm_state10, zext_ln44_1_reg_1087, ap_CS_fsm_state14, zext_ln44_2_reg_1143, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_address0 <= zext_ln44_2_reg_1143(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_address0 <= zext_ln44_1_reg_1087(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_address0 <= zext_ln44_reg_1032(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_address0 <= zext_ln40_reg_965(5 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(sum_V_30_reg_280, sum_V_31_reg_304, sum_V_32_reg_328, sum_V_33_reg_352, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_d0 <= sum_V_33_reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_d0 <= sum_V_32_reg_328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_d0 <= sum_V_31_reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_d0 <= sum_V_30_reg_280;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_18_fu_518_p2 <= std_logic_vector(unsigned(lhs_24_fu_510_p3) + unsigned(mul_ln1192_15_fu_494_p2));
    ret_V_19_fu_622_p2 <= std_logic_vector(unsigned(lhs_26_fu_614_p3) + unsigned(mul_ln1192_16_reg_1061));
    ret_V_20_fu_659_p2 <= std_logic_vector(unsigned(lhs_27_fu_651_p3) + unsigned(mul_ln1192_17_fu_635_p2));
    ret_V_21_fu_762_p2 <= std_logic_vector(unsigned(lhs_29_fu_754_p3) + unsigned(mul_ln1192_18_reg_1117));
    ret_V_22_fu_799_p2 <= std_logic_vector(unsigned(lhs_30_fu_791_p3) + unsigned(mul_ln1192_19_fu_775_p2));
    ret_V_23_fu_902_p2 <= std_logic_vector(unsigned(lhs_32_fu_894_p3) + unsigned(mul_ln1192_20_reg_1173));
    ret_V_24_fu_939_p2 <= std_logic_vector(unsigned(lhs_33_fu_931_p3) + unsigned(mul_ln1192_21_fu_915_p2));
    ret_V_fu_481_p2 <= std_logic_vector(unsigned(lhs_23_fu_473_p3) + unsigned(mul_ln1192_reg_1006));
    tmp_19_fu_385_p3 <= k_reg_269(6 downto 6);
    tmp_20_fu_543_p3 <= k_7_reg_293(6 downto 6);
    tmp_21_fu_684_p3 <= k_8_reg_317(6 downto 6);
    tmp_22_fu_824_p3 <= k_9_reg_341(6 downto 6);
    tmp_31_fu_414_p3 <= (tmp_s_fu_404_p4 & j_reg_257);
    tmp_32_fu_455_p3 <= (or_ln44_fu_445_p2 & ap_const_lv5_0);
    tmp_33_fu_500_p4 <= ret_V_fu_481_p2(39 downto 8);
    tmp_34_fu_562_p3 <= (k_7_reg_293 & or_ln40_reg_1026);
    tmp_35_fu_602_p3 <= (or_ln44_1_fu_592_p2 & or_ln40_reg_1026);
    tmp_36_fu_641_p4 <= ret_V_19_fu_622_p2(39 downto 8);
    tmp_37_fu_703_p3 <= (k_8_reg_317 & or_ln40_1_reg_1081);
    tmp_38_fu_743_p3 <= (or_ln44_2_reg_1111 & or_ln40_1_reg_1081);
    tmp_39_fu_781_p4 <= ret_V_21_fu_762_p2(39 downto 8);
    tmp_40_fu_843_p3 <= (k_9_reg_341 & or_ln40_2_reg_1137);
    tmp_41_fu_883_p3 <= (or_ln44_3_reg_1167 & or_ln40_2_reg_1137);
    tmp_42_fu_921_p4 <= ret_V_23_fu_902_p2(39 downto 8);
    tmp_fu_365_p3 <= j_reg_257(5 downto 5);
    tmp_s_fu_404_p4 <= k_reg_269(6 downto 1);
    trunc_ln40_fu_381_p1 <= j_reg_257(5 - 1 downto 0);

    weights_layer2_weights_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln1118_30_fu_468_p1, ap_block_pp1_stage0, zext_ln1118_25_fu_609_p1, ap_block_pp2_stage0, zext_ln1118_27_fu_749_p1, zext_ln1118_29_fu_889_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_layer2_weights_V_address0 <= zext_ln1118_29_fu_889_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_layer2_weights_V_address0 <= zext_ln1118_27_fu_749_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            weights_layer2_weights_V_address0 <= zext_ln1118_25_fu_609_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_layer2_weights_V_address0 <= zext_ln1118_30_fu_468_p1(11 - 1 downto 0);
        else 
            weights_layer2_weights_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    weights_layer2_weights_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln1118_fu_422_p1, ap_block_pp0_stage0, zext_ln1118_24_fu_569_p1, ap_block_pp1_stage0, zext_ln1118_26_fu_710_p1, ap_block_pp2_stage0, zext_ln1118_28_fu_850_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_layer2_weights_V_address1 <= zext_ln1118_28_fu_850_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_layer2_weights_V_address1 <= zext_ln1118_26_fu_710_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            weights_layer2_weights_V_address1 <= zext_ln1118_24_fu_569_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_layer2_weights_V_address1 <= zext_ln1118_fu_422_p1(11 - 1 downto 0);
        else 
            weights_layer2_weights_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    weights_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            weights_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer2_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            weights_layer2_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer2_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_24_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_562_p3),64));
    zext_ln1118_25_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_602_p3),64));
    zext_ln1118_26_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_703_p3),64));
    zext_ln1118_27_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_743_p3),64));
    zext_ln1118_28_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_843_p3),64));
    zext_ln1118_29_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_883_p3),64));
    zext_ln1118_30_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_fu_463_p2),64));
    zext_ln1118_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_414_p3),64));
    zext_ln40_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_257),11));
    zext_ln40_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_257),64));
    zext_ln42_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln44_1_fu_592_p2),64));
    zext_ln42_2_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln44_2_reg_1111),64));
    zext_ln42_3_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln44_3_reg_1167),64));
    zext_ln42_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln44_fu_445_p2),64));
    zext_ln44_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln40_1_fu_675_p2),64));
    zext_ln44_2_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln40_2_fu_815_p2),64));
    zext_ln44_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln40_fu_534_p2),64));
end behav;
