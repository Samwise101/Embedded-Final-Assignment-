-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer3_weights_layer3_weights_V_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer3_weights_layer3_weights_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000110100", 1 => "00000110011", 2 => "11111011011", 
    3 => "00001000111", 4 => "00000011011", 5 => "00001001101", 
    6 => "11111100111", 7 => "11111000000", 8 to 9=> "11111000001", 
    10 => "11111001100", 11 => "11111001001", 12 => "00000011110", 
    13 => "11111010010", 14 => "11111110101", 15 => "00000101111", 
    16 => "11111011110", 17 => "11111100011", 18 => "00011000000", 
    19 => "00001000000", 20 => "11111111100", 21 => "11010100000", 
    22 => "00001011011", 23 => "00001011010", 24 => "00000110011", 
    25 => "11111001010", 26 => "00000110111", 27 => "11111011100", 
    28 => "00010001010", 29 => "11111001011", 30 => "00001111101", 
    31 => "11111000101", 32 => "11100111001", 33 => "11111010001", 
    34 => "00001110110", 35 => "11111001100", 36 => "00000111111", 
    37 => "00000101000", 38 => "00011011001", 39 => "00001101010", 
    40 => "00000111111", 41 => "11101111100", 42 => "00000010010", 
    43 => "11111010100", 44 => "00001100011", 45 => "11111101001", 
    46 => "00001100001", 47 => "11110000000", 48 => "11110011110", 
    49 => "11000101010", 50 => "00011101001", 51 => "11111011101", 
    52 => "00001000100", 53 => "00011111001", 54 => "00000000101", 
    55 => "11101101101", 56 => "11100011000", 57 => "00001101000", 
    58 => "11110001111", 59 => "11101101101", 60 => "00011110010", 
    61 => "11110110110", 62 => "11110011111", 63 => "00010011100", 
    64 => "00001100101", 65 => "00000010000", 66 => "11100110000", 
    67 => "11111111010", 68 => "00000110011", 69 => "00011000000", 
    70 => "00000010001", 71 => "11111000101", 72 => "00010011101", 
    73 => "00000100010", 74 => "00000001011", 75 => "11100011110", 
    76 => "11111110001", 77 => "11110011100", 78 => "00001011000", 
    79 => "00001001111", 80 => "00000001100", 81 => "00010100101", 
    82 => "00010000000", 83 => "11111011110", 84 => "00000010010", 
    85 => "00001111001", 86 => "11011101100", 87 => "00011100111", 
    88 => "00000100100", 89 => "11011101100", 90 => "11110001111", 
    91 => "00000110010", 92 => "11011101000", 93 => "11111111100", 
    94 => "00000011111", 95 => "00011110111", 96 => "11101011111", 
    97 => "00000101001", 98 => "11111001100", 99 => "11110111111", 
    100 => "00010001010", 101 => "00001111010", 102 => "11011110011", 
    103 => "00011110111", 104 => "00000111111", 105 => "00000101100", 
    106 => "11111000000", 107 => "00000101111", 108 => "11111110100", 
    109 => "11110110001", 110 => "00010010101", 111 => "00011000111", 
    112 => "00001100100", 113 => "11011000010", 114 => "00010011000", 
    115 => "00000111010", 116 => "11100100100", 117 => "00010001001", 
    118 => "00001100011", 119 => "00000011100", 120 => "11111000010", 
    121 => "00000101000", 122 => "00001001101", 123 => "00001110111", 
    124 => "00010101011", 125 => "11111100000", 126 => "11101100001", 
    127 => "11111011010", 128 => "11111100000", 129 => "11101101010", 
    130 => "00000111110", 131 => "11110100010", 132 => "11100001000", 
    133 => "00001001000", 134 => "00011010011", 135 => "00000110000", 
    136 => "11111001011", 137 => "00001000001", 138 => "11110111010", 
    139 => "11110101010", 140 => "11110010000", 141 => "11111101001", 
    142 => "00000111100", 143 => "00001010000", 144 => "00000111011", 
    145 => "00001011001", 146 => "11101100010", 147 => "00000111010", 
    148 => "11101101101", 149 => "11010111100", 150 => "00100001011", 
    151 => "00000011011", 152 => "11110011111", 153 => "11100101000", 
    154 => "00001101100", 155 => "00010011101", 156 => "00101000100", 
    157 => "11111010101", 158 => "11101101100", 159 => "11100111001", 
    160 => "11111001011", 161 => "11101010110", 162 => "11111001001", 
    163 => "11111010111", 164 => "11100110001", 165 => "11111110001", 
    166 => "11100001001", 167 => "00101001010", 168 => "11011010111", 
    169 => "11110000010", 170 => "00011000010", 171 => "00100000010", 
    172 => "11111010000", 173 => "00000100101", 174 => "11111010101", 
    175 => "00011101001", 176 => "11111011111", 177 => "00001000111", 
    178 => "11011111000", 179 => "11111111111", 180 => "00010111011", 
    181 => "10111010011", 182 => "11100101101", 183 => "00010001110", 
    184 => "00001011110", 185 => "00001000001", 186 => "00100010001", 
    187 => "11111101000", 188 => "11111100100", 189 => "11111001011", 
    190 => "00001010101", 191 => "00000101101", 192 => "00000110001", 
    193 => "00000100110", 194 => "11110010010", 195 => "11111011001", 
    196 => "00011000010", 197 => "00000100011", 198 => "00010000001", 
    199 => "11101101100", 200 => "00101011001", 201 => "00011010101", 
    202 => "11100000110", 203 => "00001000000", 204 => "11110011000", 
    205 => "00000000100", 206 => "00010110010", 207 => "11100010110", 
    208 => "11101000111", 209 => "11110111001", 210 => "00001110001", 
    211 => "11111010001", 212 => "00000011000", 213 => "00011011101", 
    214 => "11001001010", 215 => "00110000000", 216 => "11111100011", 
    217 => "00000001011", 218 => "00010101000", 219 => "00001110111", 
    220 => "00000101110", 221 => "11111110100", 222 => "11101010101", 
    223 => "00001001011", 224 => "11110011010", 225 => "00000011101", 
    226 => "00001000111", 227 => "11111000110", 228 => "00000101101", 
    229 => "00000011110", 230 => "00000010111", 231 => "00001100000", 
    232 => "11111111100", 233 => "11111100001", 234 => "11101101111", 
    235 => "11110110000", 236 => "00011000100", 237 => "11111111000", 
    238 => "00000001011", 239 => "00001110011", 240 => "11100111000", 
    241 => "00001100011", 242 => "11111111100", 243 => "11110101110", 
    244 => "11100111010", 245 => "11101001010", 246 => "00000010001", 
    247 => "00000110100", 248 => "11110001011", 249 => "11101011111", 
    250 => "11111100000", 251 => "00001000101", 252 => "00001110101", 
    253 => "00000110101", 254 => "11101110010", 255 => "00110011010", 
    256 => "00001111100", 257 => "11111000111", 258 => "11100111111", 
    259 => "11110101100", 260 => "11110110001", 261 => "11010011001", 
    262 => "11110110101", 263 => "00001001110", 264 => "00011101000", 
    265 => "00000000011", 266 => "00010110100", 267 => "00001010101", 
    268 => "11111111111", 269 => "00000000100", 270 => "00000000110", 
    271 => "11110110010", 272 => "00100101001", 273 => "11111011111", 
    274 => "11101100011", 275 => "00000001100", 276 => "00000110101", 
    277 => "00010011110", 278 => "11001110000", 279 => "00011010011", 
    280 => "00001101110", 281 => "11010010011", 282 => "11011011000", 
    283 => "11101001110", 284 => "11011110010", 285 => "11111000101", 
    286 => "00001110000", 287 => "11100000110", 288 => "00001001011", 
    289 => "11110010011", 290 => "11001001110", 291 => "11111001111", 
    292 => "00000100010", 293 => "11011100000", 294 => "11111110110", 
    295 => "00010110101", 296 => "11110001110", 297 => "00100110001", 
    298 => "00100011100", 299 => "00011001111", 300 => "11111011001", 
    301 => "11110101100", 302 => "00010110001", 303 => "00010111111", 
    304 => "11111101001", 305 => "00011000011", 306 => "11111111100", 
    307 => "11110110011", 308 => "00000010011", 309 => "11101110000", 
    310 => "00100101010", 311 => "00010110010", 312 => "00100001111", 
    313 => "00000001110", 314 => "11011101100", 315 => "11110100011", 
    316 => "11100100001", 317 => "00000011110", 318 => "11011100001", 
    319 => "11100101111", 320 => "11111111101", 321 => "11101110110", 
    322 => "11101110101", 323 => "11110100000", 324 => "00100100111", 
    325 => "11101101011", 326 => "00010010111", 327 => "00011111000", 
    328 => "00010010110", 329 => "00000011011", 330 => "00010101110", 
    331 => "00100011101", 332 => "11100010111", 333 => "11110101010", 
    334 => "00010010110", 335 => "11110110110", 336 => "00011110000", 
    337 => "11111001000", 338 => "11111110000", 339 => "00000111001", 
    340 => "11110001011", 341 => "11110101110", 342 => "11111111101", 
    343 => "11100100001", 344 => "11011001110", 345 => "00010110010", 
    346 => "11111100001", 347 => "00000101010", 348 => "00010001000", 
    349 => "00001001011", 350 => "00001000000", 351 => "00000111111", 
    352 => "11100100100", 353 => "00011100100", 354 => "00001001110", 
    355 => "00000010111", 356 => "00000011111", 357 => "00001001011", 
    358 => "11111001001", 359 => "11011110010", 360 => "00111100100", 
    361 => "00001001000", 362 => "11101001111", 363 => "00011010001", 
    364 => "11111011101", 365 => "11111011100", 366 => "00010110111", 
    367 => "11110001101", 368 => "11100111011", 369 => "00000000100", 
    370 => "00011000100", 371 => "00000110011", 372 => "00000000110", 
    373 => "00000100001", 374 => "00000000100", 375 => "11100110001", 
    376 => "00001101001", 377 => "00000111011", 378 => "11111110100", 
    379 => "11110101001", 380 => "11011011110", 381 => "11111001011", 
    382 => "11110110000", 383 => "00010101111", 384 => "00010001001", 
    385 => "00000010110", 386 => "00011011100", 387 => "00000000000", 
    388 => "11111100010", 389 => "00011001101", 390 => "11110001010", 
    391 => "00001000010", 392 => "00001001110", 393 => "11101110100", 
    394 => "00010100000", 395 => "11110010010", 396 => "11011111111", 
    397 => "00000101111", 398 => "11110111001", 399 => "00001001111", 
    400 => "00000101001", 401 => "00000100000", 402 => "00110001010", 
    403 => "11111101001", 404 => "11111000010", 405 => "11111111010", 
    406 => "00001100111", 407 => "11011100000", 408 => "10110111010", 
    409 => "00000111010", 410 => "00000100011", 411 => "11111101111", 
    412 => "00011010110", 413 => "11111101001", 414 => "11011110110", 
    415 => "11110100011", 416 => "00101111011", 417 => "00001111111", 
    418 => "00100010101", 419 => "11111001001", 420 => "00001001111", 
    421 => "00000111011", 422 => "00000110010", 423 => "11011001001", 
    424 => "11101101100", 425 => "11111110000", 426 => "00010010001", 
    427 => "11101011100", 428 => "11111110110", 429 => "00000000001", 
    430 => "11110100111", 431 => "00000101010", 432 => "00001100100", 
    433 => "00001000011", 434 => "00000000001", 435 => "11111100001", 
    436 => "00000100011", 437 => "00001000001", 438 => "00011000011", 
    439 => "11111011011", 440 => "11111110110", 441 => "00011010100", 
    442 => "00001001111", 443 => "11100110101", 444 => "00100000111", 
    445 => "11110111110", 446 => "11100100000", 447 => "11101110101", 
    448 => "00001011010", 449 => "00000100010", 450 => "11101100110", 
    451 => "11111010010", 452 => "00000111111", 453 => "11111111010", 
    454 => "11100110000", 455 => "00010110010", 456 => "11101000011", 
    457 => "11011110111", 458 => "00100110000", 459 => "00010011010", 
    460 => "11011000101", 461 => "11111010001", 462 => "11111111110", 
    463 => "00000101101", 464 => "00001010110", 465 => "11111110101", 
    466 => "00100100100", 467 => "00000100001", 468 => "11110100110", 
    469 => "00010100100", 470 => "11111011010", 471 => "11100111100", 
    472 => "11111000101", 473 => "00000000101", 474 => "11110101101", 
    475 => "11111100110", 476 => "00011000000", 477 => "11111100001", 
    478 => "00000111011", 479 => "11010110011", 480 => "00011100110", 
    481 => "11111100101", 482 => "00011010000", 483 => "11111010001", 
    484 => "11111011011", 485 => "00100100000", 486 => "00010100001", 
    487 => "11001101100", 488 => "11100001011", 489 => "00010000111", 
    490 => "00010001000", 491 => "11011111101", 492 => "00000111110", 
    493 => "11111011011", 494 => "11110101100", 495 => "11111000111", 
    496 => "11110011111", 497 => "11011011000", 498 => "11110010111", 
    499 => "00000100101", 500 => "00010011111", 501 => "00100101000", 
    502 => "11100110000", 503 => "11111000111", 504 => "00011100111", 
    505 => "11110001111", 506 => "00000111010", 507 => "00101101111", 
    508 => "00010000010", 509 => "11110100111", 510 => "00010000010", 
    511 => "11010011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer3_weights_layer3_weights_V is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer3_weights_layer3_weights_V is
    component nn_inference_hwmm_layer3_weights_layer3_weights_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer3_weights_layer3_weights_V_rom_U :  component nn_inference_hwmm_layer3_weights_layer3_weights_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


